/*  File    : path_tracker.cpp
 *  Abstract:
 *
 *      This is code that was automatically generated from an OpenRTDynamics 2 system
 *      using the Simulink s-function target. From the Matlab command prompt type
 *
 *          mex path_tracker.cpp
 * 
 *      to compile the s-function.
 *
 *      WARNING: Do not edit this file manually. Your changes might be lost.
 *
 *
 *  Configured input signals:
 *
 *  +-------+------------------------+---------+--------+-------+----------------+-----------------------------------------+
 *  | #port | input signal,  to -->  | outputs | update | reset | datatype (c++) | description                             |
 *  +-------+------------------------+---------+--------+-------+----------------+-----------------------------------------+
 *  |   0   |           Ts           |         |   X    |       |     double     | sampling time [s]                       |
 *  |   1   |       velocity_        |    X    |        |       |     double     | vehicle velocity [m/s]                  |
 *  |   2   |      velocity_dot      |         |        |       |     double     | vehicle acceleration [m/s^2] (optional) |
 *  |   3   |           x            |    X    |   X    |       |     double     | state x [m]                             |
 *  |   4   |           y            |    X    |   X    |       |     double     | state y [m]                             |
 *  |   5   |         x_dot          |         |        |       |     double     | state d/dt x [m/s] (optional)           |
 *  |   6   |         y_dot          |         |        |       |     double     | state d/dt y [m/s] (optional)           |
 *  |   7   |        Delta_u         |    X    |        |       |     double     | Delta_u [rad] (optional)                |
 *  |   8   |      Delta_u_dot       |         |        |       |     double     | Delta_u_dot[rad/s] (optional)           |
 *  |   9   | async_input_data_valid |         |   X    |       |      bool      |                                         |
 *  |   10  |   input_sample_valid   |    X    |   X    |       |      bool      |                                         |
 *  |   11  |        d_sample        |         |   X    |       |     double     |                                         |
 *  |   12  |        x_sample        |         |   X    |       |     double     |                                         |
 *  |   13  |        y_sample        |         |   X    |       |     double     |                                         |
 *  |   14  |       psi_sample       |         |   X    |       |     double     |                                         |
 *  |   15  |        K_sample        |         |   X    |       |     double     |                                         |
 *  +-------+------------------------+---------+--------+-------+----------------+-----------------------------------------+
 *
 *  Configured output signals:
 *
 *  +-------+--------------------------------+----------------+
 *  | #port |          input signal          | datatype (c++) |
 *  +-------+--------------------------------+----------------+
 *  |   0   |          output_valid          |      bool      |
 *  |   1   |   need_more_path_input_data    |      bool      |
 *  |   2   | distance_at_the_end_of_horizon |     double     |
 *  |   3   |         distance_ahead         |     double     |
 *  |   4   |           head_index           |    int32_t     |
 *  |   5   |         read_position          |    int32_t     |
 *  |   6   |     elements_free_to_write     |    int32_t     |
 *  |   7   |         tracked_index          |    int32_t     |
 *  |   8   |             d_star             |     double     |
 *  |   9   |             v_star             |     double     |
 *  |   10  |              x_r               |     double     |
 *  |   11  |              y_r               |     double     |
 *  |   12  |             psi_r              |     double     |
 *  |   13  |              K_r               |     double     |
 *  |   14  |           psi_r_dot            |     double     |
 *  |   15  |            Delta_l             |     double     |
 *  |   16  |          Delta_l_dot           |     double     |
 *  +-------+--------------------------------+----------------+
 *
 */

#include <iostream>

#include <stdio.h>
#include <math.h>

// custom code


class CircularBuffer {
public:

    double *state_memory;
    int n, write_cnt, abs_cnt;

    CircularBuffer(int n) {
    
        this->state_memory = new double[n];
        this->n         = n;
        this->write_cnt = 0;
        this->abs_cnt   = 0;   
    }
    
    ~CircularBuffer() {
    
        delete[] this->state_memory;
    }

    void reset() {
    
        this->write_cnt = 0;
        this->abs_cnt   = 0;

        for (int i = 0; i < n; ++i) {
            state_memory[i] = 0;
        }
    }
    
    void get_current_absolute_write_index(int & index) {
        index = this->abs_cnt;

        // printf( "get_current_absolute_write_index (%p): %d\n", this, this->abs_cnt );
    }

    void get_absolute_minimal_index(int & index) {
        index = this->abs_cnt - this->n;

        if (index < 0) {
            index = 0;
        }
    }

    void read_from_absolute_index(double & output, int abs_index) {
    
        int diff = this->abs_cnt - abs_index; // >= 0
    
        int arr_index = this->write_cnt - diff;
        
        if (arr_index < 0) {
          arr_index = this->n - (-arr_index);
        }
        
        if (arr_index >= this->n) { // check this
        
            // error
            // printf("read_from_absolute_index: bad index %d (maximal valid index: %d)\n", abs_index, this->abs_cnt-1);
            output = NAN;
            
        } else if ( arr_index < 0 ) {
        
            // error
            // printf("read_from_absolute_index: bad index %d (maximal valid index: %d)\n", abs_index, this->abs_cnt-1);
            output = NAN;
            
        } else {
        
            output = state_memory[ arr_index ];
            
        }        
    }
    
    void append_to_buffer(double value) {
    
        state_memory[ this->write_cnt ] = value;
        
        this->abs_cnt++;
        this->write_cnt++;
        
        if (this->write_cnt >= this->n) {
        
            // wrap
            this->write_cnt = 0;
        }

        // printf( "append_to_buffer (%p): %d %f\n", this, this->abs_cnt, value );

    }

};

typedef CircularBuffer *CircularBufferPtr;

// end of custom code

// namespace for simulation {
  // global variables

  // namespace for Sys1000_store_input_data {
    // global variables

    class Sys1000_store_input_data {
      public:


      // state update


      // state update


      //
      // cached output values
      //


      // API-function resetStates
      void resetStates() { // created by cpp_define_function

      }
      // API-function updateStates
      void updateStates(double y_sample, CircularBufferPtr s19, double d_sample, CircularBufferPtr s18, double K_sample, double psi_sample, CircularBufferPtr s17, double x_sample, CircularBufferPtr s21, CircularBufferPtr s20) { // created by cpp_define_function


        // restoring the signals  from the states 


        // calculating the block outputs in the following order 
        // that depend on d_sample, s17, x_sample, s18, y_sample, s19, psi_sample, s20, K_sample, s21
        // dependencies that require a state update are  


        { // calling the custom c++ function s17->append_to_buffer
          s17->append_to_buffer(d_sample);
        }
        { // calling the custom c++ function s18->append_to_buffer
          s18->append_to_buffer(x_sample);
        }
        { // calling the custom c++ function s19->append_to_buffer
          s19->append_to_buffer(y_sample);
        }
        { // calling the custom c++ function s20->append_to_buffer
          s20->append_to_buffer(psi_sample);
        }
        { // calling the custom c++ function s21->append_to_buffer
          s21->append_to_buffer(K_sample);
        }

        // calculating the block outputs in the following order 
        // that depend on 
        // dependencies that require a state update are  


      }
      // API-function calcResults_1
      void calcResults_1() { // created by cpp_define_function


        // calculating the block outputs in the following order 
        // that depend on 
        // dependencies that require a state update are d_sample, s17, x_sample, s18, y_sample, s19, psi_sample, s20, K_sample, s21 


        // saving the signals  into the states 
      }
      // all system inputs and outputs combined
      struct Inputs{
        CircularBufferPtr s19;
        double y_sample;
        double d_sample;
        CircularBufferPtr s18;
        double psi_sample;
        CircularBufferPtr s20;
        CircularBufferPtr s17;
        double x_sample;
        CircularBufferPtr s21;
        double K_sample;

      };
      struct Outputs{
        ;

      };
    };

  // end of namespace for Sys1000_store_input_data

  // namespace for Sys1001_process_data {
    // global variables

    // namespace for Sys1002_tracker {
      // global variables

      // namespace for Sys1003_optim_loop {
        // global variables

        class Sys1003_optim_loop {
          public:


          // state update
          double block_68_mem;
          int32_t block_65_mem;
          int32_t block_50_mem;


          //
          // cached output values
          //

          double s78__block_68;
          int32_t s75_shared_counter__block_65;
          int32_t s76__block_66;
          bool s77__block_67;
          double s79_J_star__block_69;
          int32_t s61__block_51;
          int32_t s60_Delta_index__block_50;
          int32_t s59_Delta_index__block_49;
          int32_t s62_index_to_investigate_index_to_investigate__block_52;
          double s63__block_53;
          double s65__block_55;
          double s67__block_57;
          double s64__block_54;
          double s66__block_56;
          double s68__block_58;
          double s69__block_59;
          double s70_J_to_verify_J_to_verify__block_60;
          bool s71_step_caused_improvement__block_61;
          double s72_J_star__block_62;
          bool s80_reached_the_end_of_currently_available_path_data__block_70;
          bool s86_reached_minimum__block_76;
          int32_t s87__block_77;
          int32_t s81__block_71;
          int32_t s82__block_72;
          int32_t s83__block_73;
          bool s85__block_75;
          int32_t s88_loop_until__block_78;
          int32_t s89__block_79;
          int32_t s90_index_head__block_80;

          // API-function resetStates
          void resetStates() { // created by cpp_define_function

            block_68_mem = 0.0;
            block_65_mem = 0;
            block_50_mem = 0;
          }
          // API-function updateStates
          void updateStates() { // created by cpp_define_function
            int32_t s73_cnt_increase;
            int32_t s74;


            // restoring the signals s78, s75_shared_counter, s76, s77, s79_J_star, s61, s60_Delta_index, s59_Delta_index, s62_index_to_investigate_index_to_investigate, s63, s65, s67, s64, s66, s68, s69, s70_J_to_verify_J_to_verify, s71_step_caused_improvement, s72_J_star, s80_reached_the_end_of_currently_available_path_data, s86_reached_minimum, s87, s81, s82, s83, s85, s88_loop_until, s89, s90_index_head from the states 
            double &s78 = s78__block_68;
            int32_t &s75_shared_counter = s75_shared_counter__block_65;
            int32_t &s76 = s76__block_66;
            bool &s77 = s77__block_67;
            double &s79_J_star = s79_J_star__block_69;
            int32_t &s61 = s61__block_51;
            int32_t &s60_Delta_index = s60_Delta_index__block_50;
            int32_t &s59_Delta_index = s59_Delta_index__block_49;
            int32_t &s62_index_to_investigate_index_to_investigate = s62_index_to_investigate_index_to_investigate__block_52;
            double &s63 = s63__block_53;
            double &s65 = s65__block_55;
            double &s67 = s67__block_57;
            double &s64 = s64__block_54;
            double &s66 = s66__block_56;
            double &s68 = s68__block_58;
            double &s69 = s69__block_59;
            double &s70_J_to_verify_J_to_verify = s70_J_to_verify_J_to_verify__block_60;
            bool &s71_step_caused_improvement = s71_step_caused_improvement__block_61;
            double &s72_J_star = s72_J_star__block_62;
            bool &s80_reached_the_end_of_currently_available_path_data = s80_reached_the_end_of_currently_available_path_data__block_70;
            bool &s86_reached_minimum = s86_reached_minimum__block_76;
            int32_t &s87 = s87__block_77;
            int32_t &s81 = s81__block_71;
            int32_t &s82 = s82__block_72;
            int32_t &s83 = s83__block_73;
            bool &s85 = s85__block_75;
            int32_t &s88_loop_until = s88_loop_until__block_78;
            int32_t &s89 = s89__block_79;
            int32_t &s90_index_head = s90_index_head__block_80;


            // calculating the block outputs in the following order s73_cnt_increase, s74
            // that depend on 
            // dependencies that require a state update are  

            s73_cnt_increase = 1.0;
            s74 = s75_shared_counter + s73_cnt_increase;

            block_68_mem = s72_J_star;
            block_65_mem = s74;
            block_50_mem = s59_Delta_index;
          }
          // API-function calcResults_1 to compute: s60_Delta_index, s72_J_star, s86_reached_minimum, s80_reached_the_end_of_currently_available_path_data, s90_index_head, s62_index_to_investigate_index_to_investigate, s70_J_to_verify_J_to_verify, s88_loop_until
          void calcResults_1(int32_t &s60_Delta_index, double &s72_J_star, bool &s86_reached_minimum, bool &s80_reached_the_end_of_currently_available_path_data, int32_t &s90_index_head, int32_t &s62_index_to_investigate_index_to_investigate, double &s70_J_to_verify_J_to_verify, int32_t &s88_loop_until, double s41_J_star_0, int32_t s28, int32_t s107_Delta_index_track, int32_t s58_search_index_increment, CircularBufferPtr s18, double x, CircularBufferPtr s19, double y, int32_t s31_index_head, CircularBufferPtr s17) { // created by cpp_define_function
            double s78;
            int32_t s75_shared_counter;
            int32_t s76;
            bool s77;
            double s79_J_star;
            int32_t s61;
            int32_t s59_Delta_index;
            double s63;
            double s65;
            double s67;
            double s64;
            double s66;
            double s68;
            double s69;
            bool s71_step_caused_improvement;
            int32_t s87;
            int32_t s81;
            int32_t s82;
            int32_t s83;
            bool s85;
            int32_t s89;


            // calculating the block outputs in the following order s78, s75_shared_counter, s76, s77, s79_J_star, s61, s60_Delta_index, s59_Delta_index, s62_index_to_investigate_index_to_investigate, s63, s65, s67, s64, s66, s68, s69, s70_J_to_verify_J_to_verify, s71_step_caused_improvement, s72_J_star, s80_reached_the_end_of_currently_available_path_data, s86_reached_minimum, s87, s81, s82, s83, s85, s88_loop_until, s89, s90_index_head
            // that depend on s41_J_star_0, s28, s107_Delta_index_track, s58_search_index_increment, s18, x, s19, y, s31_index_head, s17
            // dependencies that require a state update are s72_J_star, s74, s59_Delta_index 

            s78 = block_68_mem;
            s75_shared_counter = block_65_mem;
            s76 = 0.0;
            s77 = s75_shared_counter == s76;
            if (s77) {
              s79_J_star = s41_J_star_0;
            } else {
              s79_J_star = s78;
            }
            s61 = s28 + s107_Delta_index_track;
            s60_Delta_index = block_50_mem;
            s59_Delta_index = s60_Delta_index + s58_search_index_increment;
            s62_index_to_investigate_index_to_investigate = s61 + s59_Delta_index;
            { // calling the custom c++ function s18->read_from_absolute_index
              double block_53_out0;
              s18->read_from_absolute_index(block_53_out0, s62_index_to_investigate_index_to_investigate);
              s63 = block_53_out0;
            }
            s65 = s63 - x;
            s67 = s65 * s65;
            { // calling the custom c++ function s19->read_from_absolute_index
              double block_54_out0;
              s19->read_from_absolute_index(block_54_out0, s62_index_to_investigate_index_to_investigate);
              s64 = block_54_out0;
            }
            s66 = s64 - y;
            s68 = s66 * s66;
            s69 = s67 + s68;
            s70_J_to_verify_J_to_verify = sqrt(s69);
            s71_step_caused_improvement = s70_J_to_verify_J_to_verify < s79_J_star;
            if (s71_step_caused_improvement) {
              s72_J_star = s70_J_to_verify_J_to_verify;
            } else {
              s72_J_star = s79_J_star;
            }
            s80_reached_the_end_of_currently_available_path_data = s62_index_to_investigate_index_to_investigate >= s31_index_head;
            s86_reached_minimum = !s71_step_caused_improvement;
            s87 = s86_reached_minimum  ||  s80_reached_the_end_of_currently_available_path_data;
            s81 = 1.0;
            s82 = s62_index_to_investigate_index_to_investigate - s81;
            { // calling the custom c++ function s17->get_absolute_minimal_index
              int32_t block_73_out0;
              s17->get_absolute_minimal_index(block_73_out0);
              s83 = block_73_out0;
            }
            s85 = s82 <= s83;
            s88_loop_until = s87  ||  s85;
            s89 = 1.0;
            s90_index_head = s31_index_head * s89;

            // saving the signals s78, s75_shared_counter, s76, s77, s79_J_star, s61, s60_Delta_index, s59_Delta_index, s62_index_to_investigate_index_to_investigate, s63, s65, s67, s64, s66, s68, s69, s70_J_to_verify_J_to_verify, s71_step_caused_improvement, s72_J_star, s80_reached_the_end_of_currently_available_path_data, s86_reached_minimum, s87, s81, s82, s83, s85, s88_loop_until, s89, s90_index_head into the states 
            s78__block_68 = s78;
            s75_shared_counter__block_65 = s75_shared_counter;
            s76__block_66 = s76;
            s77__block_67 = s77;
            s79_J_star__block_69 = s79_J_star;
            s61__block_51 = s61;
            s60_Delta_index__block_50 = s60_Delta_index;
            s59_Delta_index__block_49 = s59_Delta_index;
            s62_index_to_investigate_index_to_investigate__block_52 = s62_index_to_investigate_index_to_investigate;
            s63__block_53 = s63;
            s65__block_55 = s65;
            s67__block_57 = s67;
            s64__block_54 = s64;
            s66__block_56 = s66;
            s68__block_58 = s68;
            s69__block_59 = s69;
            s70_J_to_verify_J_to_verify__block_60 = s70_J_to_verify_J_to_verify;
            s71_step_caused_improvement__block_61 = s71_step_caused_improvement;
            s72_J_star__block_62 = s72_J_star;
            s80_reached_the_end_of_currently_available_path_data__block_70 = s80_reached_the_end_of_currently_available_path_data;
            s86_reached_minimum__block_76 = s86_reached_minimum;
            s87__block_77 = s87;
            s81__block_71 = s81;
            s82__block_72 = s82;
            s83__block_73 = s83;
            s85__block_75 = s85;
            s88_loop_until__block_78 = s88_loop_until;
            s89__block_79 = s89;
            s90_index_head__block_80 = s90_index_head;
          }
          // all system inputs and outputs combined
          struct Inputs{
            double x;
            int32_t s107_Delta_index_track;
            int32_t s58_search_index_increment;
            int32_t s28;
            double s41_J_star_0;
            CircularBufferPtr s19;
            int32_t s31_index_head;
            CircularBufferPtr s18;
            double y;
            CircularBufferPtr s17;

          };
          struct Outputs{
            int32_t s60_Delta_index;
            double s72_J_star;
            bool s86_reached_minimum;
            bool s80_reached_the_end_of_currently_available_path_data;
            int32_t s90_index_head;
            int32_t s62_index_to_investigate_index_to_investigate;
            double s70_J_to_verify_J_to_verify;
            int32_t s88_loop_until;

          };
        };

      // end of namespace for Sys1003_optim_loop

      class Sys1002_tracker {
        public:


        // state update
        int32_t block_91_mem;
        // instance of Sys1003_optim_loop
        Sys1003_optim_loop block_81_subsystem_Sys1003_optim_loop;


        // state update


        //
        // cached output values
        //

        int32_t s28__block_18;
        int32_t s107_Delta_index_track__block_91;
        int32_t s54__block_44;
        int32_t s33__block_23;
        double s34__block_24;
        double s36__block_26;
        double s38__block_28;
        double s35__block_25;
        double s37__block_27;
        double s39__block_29;
        double s40__block_30;
        double s41_J_star_0__block_31;
        int32_t s42__block_32;
        int32_t s43__block_33;
        int32_t s44__block_34;
        double s45__block_35;
        double s47__block_37;
        double s49__block_39;
        double s46__block_36;
        double s48__block_38;
        double s50__block_40;
        double s51__block_41;
        double s52__block_42;
        double s53__block_43;
        int32_t s55__block_45;
        bool s56__block_46;
        int32_t s57__block_47;
        int32_t s58_search_index_increment__block_48;
        int32_t s29__block_19;
        int32_t s30__block_20;
        int32_t s31_index_head__block_21;
        int32_t s91_Delta_index_Delta_index__block_81;
        int32_t s106_Delta_index_track_next__block_90;
        int32_t s108_optimal_index_tracked_index__block_92;
        double s92__block_81;
        int32_t s95__block_81;
        int32_t s98__block_82;
        int32_t s99__block_83;
        int32_t s96__block_81;
        int32_t s100__block_84;
        int32_t s101__block_85;
        int32_t s102__block_86;
        double s97__block_81;
        int32_t s103__block_87;
        double s104__block_88;
        double s105__block_89;
        int32_t s109__block_93;
        double s110__block_94;
        double s111_J_star_distance__block_95;
        bool s93_reached_minimum_minimal_distance_reached__block_81;
        bool s94_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data__block_81;

        // API-function resetStates
        void resetStates() { // created by cpp_define_function

          block_91_mem = 1;
          // reset state of subsystem embedded by 81
          block_81_subsystem_Sys1003_optim_loop.resetStates();
        }
        // API-function updateStates
        void updateStates(double x, CircularBufferPtr s19, CircularBufferPtr s18, double y, CircularBufferPtr s17) { // created by cpp_define_function


          // restoring the signals s28, s107_Delta_index_track, s54, s33, s34, s36, s38, s35, s37, s39, s40, s41_J_star_0, s42, s43, s44, s45, s47, s49, s46, s48, s50, s51, s52, s53, s55, s56, s57, s58_search_index_increment, s29, s30, s31_index_head, s91_Delta_index_Delta_index, s106_Delta_index_track_next, s108_optimal_index_tracked_index, s92, s95, s98, s99, s96, s100, s101, s102, s97, s103, s104, s105, s109, s110, s111_J_star_distance, s93_reached_minimum_minimal_distance_reached, s94_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data from the states 
          int32_t &s28 = s28__block_18;
          int32_t &s107_Delta_index_track = s107_Delta_index_track__block_91;
          int32_t &s54 = s54__block_44;
          int32_t &s33 = s33__block_23;
          double &s34 = s34__block_24;
          double &s36 = s36__block_26;
          double &s38 = s38__block_28;
          double &s35 = s35__block_25;
          double &s37 = s37__block_27;
          double &s39 = s39__block_29;
          double &s40 = s40__block_30;
          double &s41_J_star_0 = s41_J_star_0__block_31;
          int32_t &s42 = s42__block_32;
          int32_t &s43 = s43__block_33;
          int32_t &s44 = s44__block_34;
          double &s45 = s45__block_35;
          double &s47 = s47__block_37;
          double &s49 = s49__block_39;
          double &s46 = s46__block_36;
          double &s48 = s48__block_38;
          double &s50 = s50__block_40;
          double &s51 = s51__block_41;
          double &s52 = s52__block_42;
          double &s53 = s53__block_43;
          int32_t &s55 = s55__block_45;
          bool &s56 = s56__block_46;
          int32_t &s57 = s57__block_47;
          int32_t &s58_search_index_increment = s58_search_index_increment__block_48;
          int32_t &s29 = s29__block_19;
          int32_t &s30 = s30__block_20;
          int32_t &s31_index_head = s31_index_head__block_21;
          int32_t &s91_Delta_index_Delta_index = s91_Delta_index_Delta_index__block_81;
          int32_t &s106_Delta_index_track_next = s106_Delta_index_track_next__block_90;
          int32_t &s108_optimal_index_tracked_index = s108_optimal_index_tracked_index__block_92;
          double &s92 = s92__block_81;
          int32_t &s95 = s95__block_81;
          int32_t &s98 = s98__block_82;
          int32_t &s99 = s99__block_83;
          int32_t &s96 = s96__block_81;
          int32_t &s100 = s100__block_84;
          int32_t &s101 = s101__block_85;
          int32_t &s102 = s102__block_86;
          double &s97 = s97__block_81;
          int32_t &s103 = s103__block_87;
          double &s104 = s104__block_88;
          double &s105 = s105__block_89;
          int32_t &s109 = s109__block_93;
          double &s110 = s110__block_94;
          double &s111_J_star_distance = s111_J_star_distance__block_95;
          bool &s93_reached_minimum_minimal_distance_reached = s93_reached_minimum_minimal_distance_reached__block_81;
          bool &s94_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data = s94_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data__block_81;


          // calculating the block outputs in the following order 
          // that depend on x, s19, s18, y, s17
          // dependencies that require a state update are  


          block_91_mem = s106_Delta_index_track_next;

          // calculating the block outputs in the following order 
          // that depend on 
          // dependencies that require a state update are  


        }
        // API-function calcResults_1 to compute: s108_optimal_index_tracked_index, s91_Delta_index_Delta_index, s111_J_star_distance, s93_reached_minimum_minimal_distance_reached, s94_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data
        void calcResults_1(int32_t &s108_optimal_index_tracked_index, int32_t &s91_Delta_index_Delta_index, double &s111_J_star_distance, bool &s93_reached_minimum_minimal_distance_reached, bool &s94_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data, double x, CircularBufferPtr s18, CircularBufferPtr s19, double y, CircularBufferPtr s17) { // created by cpp_define_function
          int32_t s28;
          int32_t s107_Delta_index_track;
          int32_t s54;
          int32_t s33;
          double s34;
          double s36;
          double s38;
          double s35;
          double s37;
          double s39;
          double s40;
          double s41_J_star_0;
          int32_t s42;
          int32_t s43;
          int32_t s44;
          double s45;
          double s47;
          double s49;
          double s46;
          double s48;
          double s50;
          double s51;
          double s52;
          double s53;
          int32_t s55;
          bool s56;
          int32_t s57;
          int32_t s58_search_index_increment;
          int32_t s29;
          int32_t s30;
          int32_t s31_index_head;
          int32_t s106_Delta_index_track_next;
          double s92;
          int32_t s95;
          int32_t s98;
          int32_t s99;
          int32_t s96;
          int32_t s100;
          int32_t s101;
          int32_t s102;
          double s97;
          int32_t s103;
          double s104;
          double s105;
          int32_t s109;
          double s110;


          // calculating the block outputs in the following order s28, s107_Delta_index_track, s54, s33, s34, s36, s38, s35, s37, s39, s40, s41_J_star_0, s42, s43, s44, s45, s47, s49, s46, s48, s50, s51, s52, s53, s55, s56, s57, s58_search_index_increment, s29, s30, s31_index_head, s91_Delta_index_Delta_index, s106_Delta_index_track_next, s108_optimal_index_tracked_index, s92, s95, s98, s99, s96, s100, s101, s102, s97, s103, s104, s105, s109, s110, s111_J_star_distance, s93_reached_minimum_minimal_distance_reached, s94_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data
          // that depend on x, s18, s19, y, s17
          // dependencies that require a state update are s106_Delta_index_track_next, x, s107_Delta_index_track, s28, s58_search_index_increment, s41_J_star_0, s19, s31_index_head, s18, y, s17 

          s28 = 0.0;
          s107_Delta_index_track = block_91_mem;
          s54 = 1.0;
          s33 = s28 + s107_Delta_index_track;
          { // calling the custom c++ function s18->read_from_absolute_index
            double block_24_out0;
            s18->read_from_absolute_index(block_24_out0, s33);
            s34 = block_24_out0;
          }
          s36 = s34 - x;
          s38 = s36 * s36;
          { // calling the custom c++ function s19->read_from_absolute_index
            double block_25_out0;
            s19->read_from_absolute_index(block_25_out0, s33);
            s35 = block_25_out0;
          }
          s37 = s35 - y;
          s39 = s37 * s37;
          s40 = s38 + s39;
          s41_J_star_0 = sqrt(s40);
          s42 = s28 + s107_Delta_index_track;
          s43 = 1.0;
          s44 = s42 - s43;
          { // calling the custom c++ function s18->read_from_absolute_index
            double block_35_out0;
            s18->read_from_absolute_index(block_35_out0, s44);
            s45 = block_35_out0;
          }
          s47 = s45 - x;
          s49 = s47 * s47;
          { // calling the custom c++ function s19->read_from_absolute_index
            double block_36_out0;
            s19->read_from_absolute_index(block_36_out0, s44);
            s46 = block_36_out0;
          }
          s48 = s46 - y;
          s50 = s48 * s48;
          s51 = s49 + s50;
          s52 = sqrt(s51);
          s53 = s41_J_star_0 - s52;
          s55 = 0.0;
          s56 = s53 > s55;
          s57 = -1.0;
          if (s56) {
            s58_search_index_increment = s57;
          } else {
            s58_search_index_increment = s54;
          }
          { // calling the custom c++ function s17->get_current_absolute_write_index
            int32_t block_19_out0;
            s17->get_current_absolute_write_index(block_19_out0);
            s29 = block_19_out0;
          }
          s30 = 1.0;
          s31_index_head = s29 - s30;
          {
            bool _until_condition;
            for (int _i = 0; ; ++_i) {
              { // subsystem Sys1003_optim_loop
                int32_t _s60_Delta_index;
                double _s72_J_star;
                bool _s86_reached_minimum;
                bool _s80_reached_the_end_of_currently_available_path_data;
                int32_t _s90_index_head;
                int32_t _s62_index_to_investigate_index_to_investigate;
                double _s70_J_to_verify_J_to_verify;
                int32_t _s88_loop_until;
                block_81_subsystem_Sys1003_optim_loop.calcResults_1(_s60_Delta_index, _s72_J_star, _s86_reached_minimum, _s80_reached_the_end_of_currently_available_path_data, _s90_index_head, _s62_index_to_investigate_index_to_investigate, _s70_J_to_verify_J_to_verify, _s88_loop_until, s41_J_star_0, s28, s107_Delta_index_track, s58_search_index_increment, s18, x, s19, y, s31_index_head, s17);
                s91_Delta_index_Delta_index = _s60_Delta_index;
                s92 = _s72_J_star;
                s95 = _s90_index_head;
                s96 = _s62_index_to_investigate_index_to_investigate;
                s97 = _s70_J_to_verify_J_to_verify;
                s93_reached_minimum_minimal_distance_reached = _s86_reached_minimum;
                s94_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data = _s80_reached_the_end_of_currently_available_path_data;
                _until_condition = _s88_loop_until;
              }
              { // subsystem Sys1003_optim_loop
                block_81_subsystem_Sys1003_optim_loop.updateStates();
              }
              if (_until_condition) {
                { // subsystem Sys1003_optim_loop
                  block_81_subsystem_Sys1003_optim_loop.resetStates();
                }

                break;
              }
              if (_i >= 1000) {
                { // subsystem Sys1003_optim_loop
                  block_81_subsystem_Sys1003_optim_loop.resetStates();
                }
                break;
              }

            };

          }
          s106_Delta_index_track_next = s107_Delta_index_track + s91_Delta_index_Delta_index;
          s108_optimal_index_tracked_index = s28 + s106_Delta_index_track_next;
          s98 = 0.0;
          s99 = s95 * s98;
          s100 = 0.0;
          s101 = s96 * s100;
          s102 = s99 + s101;
          s103 = 0.0;
          s104 = s97 * s103;
          s105 = s102 + s104;
          s109 = 0.0;
          s110 = s105 * s109;
          s111_J_star_distance = s92 + s110;

          // saving the signals s28, s107_Delta_index_track, s54, s33, s34, s36, s38, s35, s37, s39, s40, s41_J_star_0, s42, s43, s44, s45, s47, s49, s46, s48, s50, s51, s52, s53, s55, s56, s57, s58_search_index_increment, s29, s30, s31_index_head, s91_Delta_index_Delta_index, s106_Delta_index_track_next, s108_optimal_index_tracked_index, s92, s95, s98, s99, s96, s100, s101, s102, s97, s103, s104, s105, s109, s110, s111_J_star_distance, s93_reached_minimum_minimal_distance_reached, s94_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data into the states 
          s28__block_18 = s28;
          s107_Delta_index_track__block_91 = s107_Delta_index_track;
          s54__block_44 = s54;
          s33__block_23 = s33;
          s34__block_24 = s34;
          s36__block_26 = s36;
          s38__block_28 = s38;
          s35__block_25 = s35;
          s37__block_27 = s37;
          s39__block_29 = s39;
          s40__block_30 = s40;
          s41_J_star_0__block_31 = s41_J_star_0;
          s42__block_32 = s42;
          s43__block_33 = s43;
          s44__block_34 = s44;
          s45__block_35 = s45;
          s47__block_37 = s47;
          s49__block_39 = s49;
          s46__block_36 = s46;
          s48__block_38 = s48;
          s50__block_40 = s50;
          s51__block_41 = s51;
          s52__block_42 = s52;
          s53__block_43 = s53;
          s55__block_45 = s55;
          s56__block_46 = s56;
          s57__block_47 = s57;
          s58_search_index_increment__block_48 = s58_search_index_increment;
          s29__block_19 = s29;
          s30__block_20 = s30;
          s31_index_head__block_21 = s31_index_head;
          s91_Delta_index_Delta_index__block_81 = s91_Delta_index_Delta_index;
          s106_Delta_index_track_next__block_90 = s106_Delta_index_track_next;
          s108_optimal_index_tracked_index__block_92 = s108_optimal_index_tracked_index;
          s92__block_81 = s92;
          s95__block_81 = s95;
          s98__block_82 = s98;
          s99__block_83 = s99;
          s96__block_81 = s96;
          s100__block_84 = s100;
          s101__block_85 = s101;
          s102__block_86 = s102;
          s97__block_81 = s97;
          s103__block_87 = s103;
          s104__block_88 = s104;
          s105__block_89 = s105;
          s109__block_93 = s109;
          s110__block_94 = s110;
          s111_J_star_distance__block_95 = s111_J_star_distance;
          s93_reached_minimum_minimal_distance_reached__block_81 = s93_reached_minimum_minimal_distance_reached;
          s94_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data__block_81 = s94_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data;
        }
        // all system inputs and outputs combined
        struct Inputs{
          double x;
          CircularBufferPtr s19;
          CircularBufferPtr s18;
          double y;
          CircularBufferPtr s17;

        };
        struct Outputs{
          int32_t s108_optimal_index_tracked_index;
          int32_t s91_Delta_index_Delta_index;
          double s111_J_star_distance;
          bool s93_reached_minimum_minimal_distance_reached;
          bool s94_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data;

        };
      };

    // end of namespace for Sys1002_tracker

    // namespace for Sys1004_controller {
      // global variables

      class Sys1004_controller {
        public:


        // state update
        double block_236_mem;
        int32_t block_233_mem;


        // state update


        //
        // cached output values
        //

        int32_t s117__block_97;
        int32_t s120__block_100;
        double s121__block_101;
        double s123__block_103;
        double s125__block_105;
        double s122__block_102;
        double s124__block_104;
        double s126__block_106;
        double s127__block_107;
        double s128__block_108;
        int32_t s129__block_109;
        double s130__block_110;
        double s132__block_112;
        double s134__block_114;
        double s131__block_111;
        double s133__block_113;
        double s135__block_115;
        double s136__block_116;
        double s137__block_117;
        bool s138__block_118;
        int32_t s143__block_123;
        int32_t s144__block_124;
        double s192__block_172;
        int32_t s145__block_125;
        int32_t s146__block_126;
        double s197__block_177;
        double s206__block_186;
        double s119__block_99;
        double s148__block_128;
        double s154__block_134;
        double s118__block_98;
        double s147__block_127;
        double s153__block_133;
        double s156__block_136;
        double s150__block_130;
        double s152__block_132;
        double s149__block_129;
        double s151__block_131;
        double s155__block_135;
        double s157__block_137;
        double s158__block_138;
        double s159__block_139;
        double s160__block_140;
        double s161__block_141;
        bool s162__block_142;
        double s163__block_143;
        double s164__block_144;
        double s165__block_145;
        double s166__block_146;
        bool s167__block_147;
        double s168__block_148;
        double s169__block_149;
        double s170__block_150;
        double s171__block_151;
        bool s172__block_152;
        double s173__block_153;
        double s174__block_154;
        double s181__block_161;
        double s175__block_155;
        double s176__block_156;
        double s177__block_157;
        double s178__block_158;
        double s182__block_162;
        double s183__block_163;
        double s185__block_165;
        double s184__block_164;
        double s186__block_166;
        double s187__block_167;
        double s188__block_168;
        double s189__block_169;
        double s207__block_187;
        double s208_y_r__block_188;
        double s241__block_221;
        double s242__block_222;
        double s243__block_223;
        double s179__block_159;
        double s180_Delta_l__block_160;
        double s194__block_174;
        double s199__block_179;
        double s212__block_192;
        double s213__block_193;
        double s214_K_r__block_194;
        double s244__block_224;
        double s245__block_225;
        double s246_v_star__block_226;
        double s193__block_173;
        double s198__block_178;
        double s209__block_189;
        double s210__block_190;
        double s211__block_191;
        double s256__block_236;
        int32_t s253_shared_counter__block_233;
        int32_t s254__block_234;
        bool s255__block_235;
        double s257_psi_r__block_237;
        double s258__block_238;
        double s259__block_239;
        double s260__block_240;
        double s247__block_227;
        double s248_psi_r_dot__block_228;
        double s190__block_170;
        double s195__block_175;
        double s200__block_180;
        double s201__block_181;
        double s202_d_star__block_182;
        double s261_Delta_l_dot__block_241;
        double s191__block_171;
        double s196__block_176;
        double s203__block_183;
        double s204__block_184;
        double s205_x_r__block_185;

        // API-function resetStates
        void resetStates() { // created by cpp_define_function

          block_236_mem = 0.0;
          block_233_mem = 0;
        }
        // API-function updateStates
        void updateStates(double Ts) { // created by cpp_define_function
          double s249;
          double s250;
          int32_t s251_cnt_increase;
          int32_t s252;


          // restoring the signals s117, s120, s121, s123, s125, s122, s124, s126, s127, s128, s129, s130, s132, s134, s131, s133, s135, s136, s137, s138, s143, s144, s192, s145, s146, s197, s206, s119, s148, s154, s118, s147, s153, s156, s150, s152, s149, s151, s155, s157, s158, s159, s160, s161, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s181, s175, s176, s177, s178, s182, s183, s185, s184, s186, s187, s188, s189, s207, s208_y_r, s241, s242, s243, s179, s180_Delta_l, s194, s199, s212, s213, s214_K_r, s244, s245, s246_v_star, s193, s198, s209, s210, s211, s256, s253_shared_counter, s254, s255, s257_psi_r, s258, s259, s260, s247, s248_psi_r_dot, s190, s195, s200, s201, s202_d_star, s261_Delta_l_dot, s191, s196, s203, s204, s205_x_r from the states 
          int32_t &s117 = s117__block_97;
          int32_t &s120 = s120__block_100;
          double &s121 = s121__block_101;
          double &s123 = s123__block_103;
          double &s125 = s125__block_105;
          double &s122 = s122__block_102;
          double &s124 = s124__block_104;
          double &s126 = s126__block_106;
          double &s127 = s127__block_107;
          double &s128 = s128__block_108;
          int32_t &s129 = s129__block_109;
          double &s130 = s130__block_110;
          double &s132 = s132__block_112;
          double &s134 = s134__block_114;
          double &s131 = s131__block_111;
          double &s133 = s133__block_113;
          double &s135 = s135__block_115;
          double &s136 = s136__block_116;
          double &s137 = s137__block_117;
          bool &s138 = s138__block_118;
          int32_t &s143 = s143__block_123;
          int32_t &s144 = s144__block_124;
          double &s192 = s192__block_172;
          int32_t &s145 = s145__block_125;
          int32_t &s146 = s146__block_126;
          double &s197 = s197__block_177;
          double &s206 = s206__block_186;
          double &s119 = s119__block_99;
          double &s148 = s148__block_128;
          double &s154 = s154__block_134;
          double &s118 = s118__block_98;
          double &s147 = s147__block_127;
          double &s153 = s153__block_133;
          double &s156 = s156__block_136;
          double &s150 = s150__block_130;
          double &s152 = s152__block_132;
          double &s149 = s149__block_129;
          double &s151 = s151__block_131;
          double &s155 = s155__block_135;
          double &s157 = s157__block_137;
          double &s158 = s158__block_138;
          double &s159 = s159__block_139;
          double &s160 = s160__block_140;
          double &s161 = s161__block_141;
          bool &s162 = s162__block_142;
          double &s163 = s163__block_143;
          double &s164 = s164__block_144;
          double &s165 = s165__block_145;
          double &s166 = s166__block_146;
          bool &s167 = s167__block_147;
          double &s168 = s168__block_148;
          double &s169 = s169__block_149;
          double &s170 = s170__block_150;
          double &s171 = s171__block_151;
          bool &s172 = s172__block_152;
          double &s173 = s173__block_153;
          double &s174 = s174__block_154;
          double &s181 = s181__block_161;
          double &s175 = s175__block_155;
          double &s176 = s176__block_156;
          double &s177 = s177__block_157;
          double &s178 = s178__block_158;
          double &s182 = s182__block_162;
          double &s183 = s183__block_163;
          double &s185 = s185__block_165;
          double &s184 = s184__block_164;
          double &s186 = s186__block_166;
          double &s187 = s187__block_167;
          double &s188 = s188__block_168;
          double &s189 = s189__block_169;
          double &s207 = s207__block_187;
          double &s208_y_r = s208_y_r__block_188;
          double &s241 = s241__block_221;
          double &s242 = s242__block_222;
          double &s243 = s243__block_223;
          double &s179 = s179__block_159;
          double &s180_Delta_l = s180_Delta_l__block_160;
          double &s194 = s194__block_174;
          double &s199 = s199__block_179;
          double &s212 = s212__block_192;
          double &s213 = s213__block_193;
          double &s214_K_r = s214_K_r__block_194;
          double &s244 = s244__block_224;
          double &s245 = s245__block_225;
          double &s246_v_star = s246_v_star__block_226;
          double &s193 = s193__block_173;
          double &s198 = s198__block_178;
          double &s209 = s209__block_189;
          double &s210 = s210__block_190;
          double &s211 = s211__block_191;
          double &s256 = s256__block_236;
          int32_t &s253_shared_counter = s253_shared_counter__block_233;
          int32_t &s254 = s254__block_234;
          bool &s255 = s255__block_235;
          double &s257_psi_r = s257_psi_r__block_237;
          double &s258 = s258__block_238;
          double &s259 = s259__block_239;
          double &s260 = s260__block_240;
          double &s247 = s247__block_227;
          double &s248_psi_r_dot = s248_psi_r_dot__block_228;
          double &s190 = s190__block_170;
          double &s195 = s195__block_175;
          double &s200 = s200__block_180;
          double &s201 = s201__block_181;
          double &s202_d_star = s202_d_star__block_182;
          double &s261_Delta_l_dot = s261_Delta_l_dot__block_241;
          double &s191 = s191__block_171;
          double &s196 = s196__block_176;
          double &s203 = s203__block_183;
          double &s204 = s204__block_184;
          double &s205_x_r = s205_x_r__block_185;


          // calculating the block outputs in the following order s249, s250, s251_cnt_increase, s252
          // that depend on Ts
          // dependencies that require a state update are  

          s249 = Ts * s248_psi_r_dot;
          s250 = s257_psi_r + s249;
          s251_cnt_increase = 1.0;
          s252 = s253_shared_counter + s251_cnt_increase;

          block_236_mem = s250;
          block_233_mem = s252;

          // calculating the block outputs in the following order 
          // that depend on 
          // dependencies that require a state update are  


        }
        // API-function calcResults_1 to compute: s205_x_r, s208_y_r, s246_v_star, s202_d_star, s257_psi_r, s248_psi_r_dot, s214_K_r, s180_Delta_l, s261_Delta_l_dot
        void calcResults_1(double &s205_x_r, double &s208_y_r, double &s246_v_star, double &s202_d_star, double &s257_psi_r, double &s248_psi_r_dot, double &s214_K_r, double &s180_Delta_l, double &s261_Delta_l_dot, int32_t s112_tracked_index, double x, CircularBufferPtr s18, double y, CircularBufferPtr s19, double velocity_, double Delta_u, CircularBufferPtr s21, CircularBufferPtr s20, CircularBufferPtr s17) { // created by cpp_define_function
          int32_t s117;
          int32_t s120;
          double s121;
          double s123;
          double s125;
          double s122;
          double s124;
          double s126;
          double s127;
          double s128;
          int32_t s129;
          double s130;
          double s132;
          double s134;
          double s131;
          double s133;
          double s135;
          double s136;
          double s137;
          bool s138;
          int32_t s143;
          int32_t s144;
          double s192;
          int32_t s145;
          int32_t s146;
          double s197;
          double s206;
          double s119;
          double s148;
          double s154;
          double s118;
          double s147;
          double s153;
          double s156;
          double s150;
          double s152;
          double s149;
          double s151;
          double s155;
          double s157;
          double s158;
          double s159;
          double s160;
          double s161;
          bool s162;
          double s163;
          double s164;
          double s165;
          double s166;
          bool s167;
          double s168;
          double s169;
          double s170;
          double s171;
          bool s172;
          double s173;
          double s174;
          double s181;
          double s175;
          double s176;
          double s177;
          double s178;
          double s182;
          double s183;
          double s185;
          double s184;
          double s186;
          double s187;
          double s188;
          double s189;
          double s207;
          double s241;
          double s242;
          double s243;
          double s179;
          double s194;
          double s199;
          double s212;
          double s213;
          double s244;
          double s245;
          double s193;
          double s198;
          double s209;
          double s210;
          double s211;
          double s256;
          int32_t s253_shared_counter;
          int32_t s254;
          bool s255;
          double s258;
          double s259;
          double s260;
          double s247;
          double s190;
          double s195;
          double s200;
          double s201;
          double s191;
          double s196;
          double s203;
          double s204;


          // calculating the block outputs in the following order s117, s120, s121, s123, s125, s122, s124, s126, s127, s128, s129, s130, s132, s134, s131, s133, s135, s136, s137, s138, s143, s144, s192, s145, s146, s197, s206, s119, s148, s154, s118, s147, s153, s156, s150, s152, s149, s151, s155, s157, s158, s159, s160, s161, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s181, s175, s176, s177, s178, s182, s183, s185, s184, s186, s187, s188, s189, s207, s208_y_r, s241, s242, s243, s179, s180_Delta_l, s194, s199, s212, s213, s214_K_r, s244, s245, s246_v_star, s193, s198, s209, s210, s211, s256, s253_shared_counter, s254, s255, s257_psi_r, s258, s259, s260, s247, s248_psi_r_dot, s190, s195, s200, s201, s202_d_star, s261_Delta_l_dot, s191, s196, s203, s204, s205_x_r
          // that depend on s112_tracked_index, x, s18, y, s19, velocity_, Delta_u, s21, s20, s17
          // dependencies that require a state update are s250, s252 

          s117 = 1.0;
          s120 = s112_tracked_index + s117;
          { // calling the custom c++ function s18->read_from_absolute_index
            double block_101_out0;
            s18->read_from_absolute_index(block_101_out0, s120);
            s121 = block_101_out0;
          }
          s123 = x - s121;
          s125 = s123 * s123;
          { // calling the custom c++ function s19->read_from_absolute_index
            double block_102_out0;
            s19->read_from_absolute_index(block_102_out0, s120);
            s122 = block_102_out0;
          }
          s124 = y - s122;
          s126 = s124 * s124;
          s127 = s125 + s126;
          s128 = sqrt(s127);
          s129 = s112_tracked_index - s117;
          { // calling the custom c++ function s18->read_from_absolute_index
            double block_110_out0;
            s18->read_from_absolute_index(block_110_out0, s129);
            s130 = block_110_out0;
          }
          s132 = x - s130;
          s134 = s132 * s132;
          { // calling the custom c++ function s19->read_from_absolute_index
            double block_111_out0;
            s19->read_from_absolute_index(block_111_out0, s129);
            s131 = block_111_out0;
          }
          s133 = y - s131;
          s135 = s133 * s133;
          s136 = s134 + s135;
          s137 = sqrt(s136);
          s138 = s128 > s137;
          s143 = s112_tracked_index - s117;
          if (s138) {
            s144 = s143;
          } else {
            s144 = s112_tracked_index;
          }
          { // calling the custom c++ function s19->read_from_absolute_index
            double block_172_out0;
            s19->read_from_absolute_index(block_172_out0, s144);
            s192 = block_172_out0;
          }
          s145 = s112_tracked_index + s117;
          if (s138) {
            s146 = s112_tracked_index;
          } else {
            s146 = s145;
          }
          { // calling the custom c++ function s19->read_from_absolute_index
            double block_177_out0;
            s19->read_from_absolute_index(block_177_out0, s146);
            s197 = block_177_out0;
          }
          s206 = s197 - s192;
          { // calling the custom c++ function s19->read_from_absolute_index
            double block_99_out0;
            s19->read_from_absolute_index(block_99_out0, s112_tracked_index);
            s119 = block_99_out0;
          }
          if (s138) {
            s148 = s131;
          } else {
            s148 = s119;
          }
          s154 = y - s148;
          { // calling the custom c++ function s18->read_from_absolute_index
            double block_98_out0;
            s18->read_from_absolute_index(block_98_out0, s112_tracked_index);
            s118 = block_98_out0;
          }
          if (s138) {
            s147 = s130;
          } else {
            s147 = s118;
          }
          s153 = x - s147;
          s156 = atan2(s154, s153);
          if (s138) {
            s150 = s119;
          } else {
            s150 = s122;
          }
          s152 = s150 - s148;
          if (s138) {
            s149 = s118;
          } else {
            s149 = s121;
          }
          s151 = s149 - s147;
          s155 = atan2(s152, s151);
          s157 = s156 - s155;
          s158 = 6.283185307179586;
          s159 = fmod(s157, s158);
          s160 = 0.0;
          s161 = 0.0;
          s162 = s159 < s161;
          if (s162) {
            s163 = 6.283185307179586;
          } else {
            s163 = s160;
          }
          s164 = s159 + s163;
          s165 = 0.0;
          s166 = -3.141592653589793;
          s167 = s164 <= s166;
          if (s167) {
            s168 = 6.283185307179586;
          } else {
            s168 = s165;
          }
          s169 = s164 + s168;
          s170 = 0.0;
          s171 = 3.141592653589793;
          s172 = s164 > s171;
          if (s172) {
            s173 = -6.283185307179586;
          } else {
            s173 = s170;
          }
          s174 = s169 + s173;
          s181 = cos(s174);
          s175 = s153 * s153;
          s176 = s154 * s154;
          s177 = s175 + s176;
          s178 = sqrt(s177);
          s182 = s181 * s178;
          s183 = s147 - s149;
          s185 = s183 * s183;
          s184 = s148 - s150;
          s186 = s184 * s184;
          s187 = s185 + s186;
          s188 = sqrt(s187);
          s189 = s182 / s188;
          s207 = s206 * s189;
          s208_y_r = s192 + s207;
          s241 = cos(Delta_u);
          s242 = velocity_ * s241;
          s243 = 1.0;
          s179 = sin(s174);
          s180_Delta_l = s179 * s178;
          { // calling the custom c++ function s21->read_from_absolute_index
            double block_174_out0;
            s21->read_from_absolute_index(block_174_out0, s144);
            s194 = block_174_out0;
          }
          { // calling the custom c++ function s21->read_from_absolute_index
            double block_179_out0;
            s21->read_from_absolute_index(block_179_out0, s146);
            s199 = block_179_out0;
          }
          s212 = s199 - s194;
          s213 = s212 * s189;
          s214_K_r = s194 + s213;
          s244 = s180_Delta_l * s214_K_r;
          s245 = s243 - s244;
          s246_v_star = s242 / s245;
          { // calling the custom c++ function s20->read_from_absolute_index
            double block_173_out0;
            s20->read_from_absolute_index(block_173_out0, s144);
            s193 = block_173_out0;
          }
          { // calling the custom c++ function s20->read_from_absolute_index
            double block_178_out0;
            s20->read_from_absolute_index(block_178_out0, s146);
            s198 = block_178_out0;
          }
          s209 = s198 - s193;
          s210 = s209 * s189;
          s211 = s193 + s210;
          s256 = block_236_mem;
          s253_shared_counter = block_233_mem;
          s254 = 0.0;
          s255 = s253_shared_counter == s254;
          if (s255) {
            s257_psi_r = s211;
          } else {
            s257_psi_r = s256;
          }
          s258 = s211 - s257_psi_r;
          s259 = 1.0;
          s260 = s258 * s259;
          s247 = s214_K_r + s260;
          s248_psi_r_dot = s246_v_star * s247;
          { // calling the custom c++ function s17->read_from_absolute_index
            double block_170_out0;
            s17->read_from_absolute_index(block_170_out0, s144);
            s190 = block_170_out0;
          }
          { // calling the custom c++ function s17->read_from_absolute_index
            double block_175_out0;
            s17->read_from_absolute_index(block_175_out0, s146);
            s195 = block_175_out0;
          }
          s200 = s195 - s190;
          s201 = s200 * s189;
          s202_d_star = s190 + s201;
          s261_Delta_l_dot = NAN;
          { // calling the custom c++ function s18->read_from_absolute_index
            double block_171_out0;
            s18->read_from_absolute_index(block_171_out0, s144);
            s191 = block_171_out0;
          }
          { // calling the custom c++ function s18->read_from_absolute_index
            double block_176_out0;
            s18->read_from_absolute_index(block_176_out0, s146);
            s196 = block_176_out0;
          }
          s203 = s196 - s191;
          s204 = s203 * s189;
          s205_x_r = s191 + s204;

          // saving the signals s117, s120, s121, s123, s125, s122, s124, s126, s127, s128, s129, s130, s132, s134, s131, s133, s135, s136, s137, s138, s143, s144, s192, s145, s146, s197, s206, s119, s148, s154, s118, s147, s153, s156, s150, s152, s149, s151, s155, s157, s158, s159, s160, s161, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s181, s175, s176, s177, s178, s182, s183, s185, s184, s186, s187, s188, s189, s207, s208_y_r, s241, s242, s243, s179, s180_Delta_l, s194, s199, s212, s213, s214_K_r, s244, s245, s246_v_star, s193, s198, s209, s210, s211, s256, s253_shared_counter, s254, s255, s257_psi_r, s258, s259, s260, s247, s248_psi_r_dot, s190, s195, s200, s201, s202_d_star, s261_Delta_l_dot, s191, s196, s203, s204, s205_x_r into the states 
          s117__block_97 = s117;
          s120__block_100 = s120;
          s121__block_101 = s121;
          s123__block_103 = s123;
          s125__block_105 = s125;
          s122__block_102 = s122;
          s124__block_104 = s124;
          s126__block_106 = s126;
          s127__block_107 = s127;
          s128__block_108 = s128;
          s129__block_109 = s129;
          s130__block_110 = s130;
          s132__block_112 = s132;
          s134__block_114 = s134;
          s131__block_111 = s131;
          s133__block_113 = s133;
          s135__block_115 = s135;
          s136__block_116 = s136;
          s137__block_117 = s137;
          s138__block_118 = s138;
          s143__block_123 = s143;
          s144__block_124 = s144;
          s192__block_172 = s192;
          s145__block_125 = s145;
          s146__block_126 = s146;
          s197__block_177 = s197;
          s206__block_186 = s206;
          s119__block_99 = s119;
          s148__block_128 = s148;
          s154__block_134 = s154;
          s118__block_98 = s118;
          s147__block_127 = s147;
          s153__block_133 = s153;
          s156__block_136 = s156;
          s150__block_130 = s150;
          s152__block_132 = s152;
          s149__block_129 = s149;
          s151__block_131 = s151;
          s155__block_135 = s155;
          s157__block_137 = s157;
          s158__block_138 = s158;
          s159__block_139 = s159;
          s160__block_140 = s160;
          s161__block_141 = s161;
          s162__block_142 = s162;
          s163__block_143 = s163;
          s164__block_144 = s164;
          s165__block_145 = s165;
          s166__block_146 = s166;
          s167__block_147 = s167;
          s168__block_148 = s168;
          s169__block_149 = s169;
          s170__block_150 = s170;
          s171__block_151 = s171;
          s172__block_152 = s172;
          s173__block_153 = s173;
          s174__block_154 = s174;
          s181__block_161 = s181;
          s175__block_155 = s175;
          s176__block_156 = s176;
          s177__block_157 = s177;
          s178__block_158 = s178;
          s182__block_162 = s182;
          s183__block_163 = s183;
          s185__block_165 = s185;
          s184__block_164 = s184;
          s186__block_166 = s186;
          s187__block_167 = s187;
          s188__block_168 = s188;
          s189__block_169 = s189;
          s207__block_187 = s207;
          s208_y_r__block_188 = s208_y_r;
          s241__block_221 = s241;
          s242__block_222 = s242;
          s243__block_223 = s243;
          s179__block_159 = s179;
          s180_Delta_l__block_160 = s180_Delta_l;
          s194__block_174 = s194;
          s199__block_179 = s199;
          s212__block_192 = s212;
          s213__block_193 = s213;
          s214_K_r__block_194 = s214_K_r;
          s244__block_224 = s244;
          s245__block_225 = s245;
          s246_v_star__block_226 = s246_v_star;
          s193__block_173 = s193;
          s198__block_178 = s198;
          s209__block_189 = s209;
          s210__block_190 = s210;
          s211__block_191 = s211;
          s256__block_236 = s256;
          s253_shared_counter__block_233 = s253_shared_counter;
          s254__block_234 = s254;
          s255__block_235 = s255;
          s257_psi_r__block_237 = s257_psi_r;
          s258__block_238 = s258;
          s259__block_239 = s259;
          s260__block_240 = s260;
          s247__block_227 = s247;
          s248_psi_r_dot__block_228 = s248_psi_r_dot;
          s190__block_170 = s190;
          s195__block_175 = s195;
          s200__block_180 = s200;
          s201__block_181 = s201;
          s202_d_star__block_182 = s202_d_star;
          s261_Delta_l_dot__block_241 = s261_Delta_l_dot;
          s191__block_171 = s191;
          s196__block_176 = s196;
          s203__block_183 = s203;
          s204__block_184 = s204;
          s205_x_r__block_185 = s205_x_r;
        }
        // all system inputs and outputs combined
        struct Inputs{
          double x;
          CircularBufferPtr s19;
          double Ts;
          double Delta_u;
          CircularBufferPtr s18;
          int32_t s112_tracked_index;
          double y;
          double velocity_;
          CircularBufferPtr s17;
          CircularBufferPtr s21;
          CircularBufferPtr s20;

        };
        struct Outputs{
          double s205_x_r;
          double s208_y_r;
          double s246_v_star;
          double s202_d_star;
          double s257_psi_r;
          double s248_psi_r_dot;
          double s214_K_r;
          double s180_Delta_l;
          double s261_Delta_l_dot;

        };
      };

    // end of namespace for Sys1004_controller

    class Sys1001_process_data {
      public:


      // state update
      // instance of Sys1004_controller
      Sys1004_controller block_242_subsystem_Sys1004_controller;
      // instance of Sys1002_tracker
      Sys1002_tracker block_96_subsystem_Sys1002_tracker;


      // state update


      //
      // cached output values
      //

      int32_t s112_tracked_index__block_96;
      double s270_Delta_l_dot__block_242;
      int32_t s271__block_243;
      int32_t s272_read_position__block_244;
      int32_t s273__block_245;
      int32_t s274_minimal_read_position__block_246;
      double s262_x_r__block_242;
      bool s115_output_valid__block_96;
      bool s116_need_more_path_input_data__block_96;
      double s263_y_r__block_242;
      double s264_v_star__block_242;
      double s265_d_star__block_242;
      double s266_psi_r__block_242;
      double s267_psi_r_dot__block_242;
      double s268_K_r__block_242;
      double s269_Delta_l__block_242;

      // API-function resetStates
      void resetStates() { // created by cpp_define_function

        // reset state of subsystem embedded by 242
        block_242_subsystem_Sys1004_controller.resetStates();
        // reset state of subsystem embedded by 96
        block_96_subsystem_Sys1002_tracker.resetStates();
      }
      // API-function updateStates
      void updateStates(double x, CircularBufferPtr s19, double Ts, CircularBufferPtr s18, double y, CircularBufferPtr s17) { // created by cpp_define_function
        int32_t s22;
        int32_t s23;
        int32_t s24;
        int32_t s26;
        bool s27;


        // restoring the signals s112_tracked_index, s270_Delta_l_dot, s271, s272_read_position, s273, s274_minimal_read_position, s262_x_r, s115_output_valid, s116_need_more_path_input_data, s263_y_r, s264_v_star, s265_d_star, s266_psi_r, s267_psi_r_dot, s268_K_r, s269_Delta_l from the states 
        int32_t &s112_tracked_index = s112_tracked_index__block_96;
        double &s270_Delta_l_dot = s270_Delta_l_dot__block_242;
        int32_t &s271 = s271__block_243;
        int32_t &s272_read_position = s272_read_position__block_244;
        int32_t &s273 = s273__block_245;
        int32_t &s274_minimal_read_position = s274_minimal_read_position__block_246;
        double &s262_x_r = s262_x_r__block_242;
        bool &s115_output_valid = s115_output_valid__block_96;
        bool &s116_need_more_path_input_data = s116_need_more_path_input_data__block_96;
        double &s263_y_r = s263_y_r__block_242;
        double &s264_v_star = s264_v_star__block_242;
        double &s265_d_star = s265_d_star__block_242;
        double &s266_psi_r = s266_psi_r__block_242;
        double &s267_psi_r_dot = s267_psi_r_dot__block_242;
        double &s268_K_r = s268_K_r__block_242;
        double &s269_Delta_l = s269_Delta_l__block_242;


        // calculating the block outputs in the following order s22, s23, s24, s26, s27
        // that depend on Ts, x, s19, s18, s17, y
        // dependencies that require a state update are  

        { // calling the custom c++ function s17->get_current_absolute_write_index
          int32_t block_12_out0;
          s17->get_current_absolute_write_index(block_12_out0);
          s22 = block_12_out0;
        }
        s23 = 1.0;
        s24 = s22 - s23;
        s26 = 5.0;
        s27 = s24 > s26;

        if (s115_output_valid == 1) {
          { // subsystem Sys1004_controller
            block_242_subsystem_Sys1004_controller.updateStates(Ts);
          }

        }
        if (s27 == 1) {
          { // subsystem Sys1002_tracker
            block_96_subsystem_Sys1002_tracker.updateStates(x, s19, s18, y, s17);
          }

        }

        // calculating the block outputs in the following order 
        // that depend on 
        // dependencies that require a state update are  


      }
      // API-function calcResults_1 to compute: s112_tracked_index, s265_d_star, s264_v_star, s262_x_r, s263_y_r, s266_psi_r, s267_psi_r_dot, s268_K_r, s269_Delta_l, s270_Delta_l_dot, s115_output_valid, s116_need_more_path_input_data, s272_read_position, s274_minimal_read_position
      void calcResults_1(int32_t &s112_tracked_index, double &s265_d_star, double &s264_v_star, double &s262_x_r, double &s263_y_r, double &s266_psi_r, double &s267_psi_r_dot, double &s268_K_r, double &s269_Delta_l, double &s270_Delta_l_dot, bool &s115_output_valid, bool &s116_need_more_path_input_data, int32_t &s272_read_position, int32_t &s274_minimal_read_position, double x, CircularBufferPtr s19, double Delta_u, CircularBufferPtr s18, double y, CircularBufferPtr s17, double velocity_, CircularBufferPtr s21, CircularBufferPtr s20) { // created by cpp_define_function
        int32_t s271;
        int32_t s273;


        // calculating the block outputs in the following order s112_tracked_index, s270_Delta_l_dot, s271, s272_read_position, s273, s274_minimal_read_position, s262_x_r, s115_output_valid, s116_need_more_path_input_data, s263_y_r, s264_v_star, s265_d_star, s266_psi_r, s267_psi_r_dot, s268_K_r, s269_Delta_l
        // that depend on x, s19, Delta_u, s18, y, s17, velocity_, s21, s20
        // dependencies that require a state update are Ts, s115_output_valid, x, s19, s18, s27, y, s17 

        { // subsystem Sys1002_tracker
          int32_t _s108_optimal_index_tracked_index;
          int32_t _s91_Delta_index_Delta_index;
          double _s111_J_star_distance;
          bool _s93_reached_minimum_minimal_distance_reached;
          bool _s94_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data;
          block_96_subsystem_Sys1002_tracker.calcResults_1(_s108_optimal_index_tracked_index, _s91_Delta_index_Delta_index, _s111_J_star_distance, _s93_reached_minimum_minimal_distance_reached, _s94_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data, x, s18, s19, y, s17);
          s112_tracked_index = _s108_optimal_index_tracked_index;
          s115_output_valid = _s93_reached_minimum_minimal_distance_reached;
          s116_need_more_path_input_data = _s94_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data;
        }
        { // subsystem Sys1004_controller
          double _s205_x_r;
          double _s208_y_r;
          double _s246_v_star;
          double _s202_d_star;
          double _s257_psi_r;
          double _s248_psi_r_dot;
          double _s214_K_r;
          double _s180_Delta_l;
          double _s261_Delta_l_dot;
          block_242_subsystem_Sys1004_controller.calcResults_1(_s205_x_r, _s208_y_r, _s246_v_star, _s202_d_star, _s257_psi_r, _s248_psi_r_dot, _s214_K_r, _s180_Delta_l, _s261_Delta_l_dot, s112_tracked_index, x, s18, y, s19, velocity_, Delta_u, s21, s20, s17);
          s270_Delta_l_dot = _s261_Delta_l_dot;
          s262_x_r = _s205_x_r;
          s263_y_r = _s208_y_r;
          s264_v_star = _s246_v_star;
          s265_d_star = _s202_d_star;
          s266_psi_r = _s257_psi_r;
          s267_psi_r_dot = _s248_psi_r_dot;
          s268_K_r = _s214_K_r;
          s269_Delta_l = _s180_Delta_l;
        }
        s271 = 1.0;
        s272_read_position = s112_tracked_index + s271;
        s273 = 100.0;
        s274_minimal_read_position = s112_tracked_index - s273;

        // saving the signals s112_tracked_index, s270_Delta_l_dot, s271, s272_read_position, s273, s274_minimal_read_position, s262_x_r, s115_output_valid, s116_need_more_path_input_data, s263_y_r, s264_v_star, s265_d_star, s266_psi_r, s267_psi_r_dot, s268_K_r, s269_Delta_l into the states 
        s112_tracked_index__block_96 = s112_tracked_index;
        s270_Delta_l_dot__block_242 = s270_Delta_l_dot;
        s271__block_243 = s271;
        s272_read_position__block_244 = s272_read_position;
        s273__block_245 = s273;
        s274_minimal_read_position__block_246 = s274_minimal_read_position;
        s262_x_r__block_242 = s262_x_r;
        s115_output_valid__block_96 = s115_output_valid;
        s116_need_more_path_input_data__block_96 = s116_need_more_path_input_data;
        s263_y_r__block_242 = s263_y_r;
        s264_v_star__block_242 = s264_v_star;
        s265_d_star__block_242 = s265_d_star;
        s266_psi_r__block_242 = s266_psi_r;
        s267_psi_r_dot__block_242 = s267_psi_r_dot;
        s268_K_r__block_242 = s268_K_r;
        s269_Delta_l__block_242 = s269_Delta_l;
      }
      // all system inputs and outputs combined
      struct Inputs{
        double x;
        CircularBufferPtr s19;
        double Ts;
        double Delta_u;
        CircularBufferPtr s18;
        double y;
        CircularBufferPtr s17;
        double velocity_;
        CircularBufferPtr s21;
        CircularBufferPtr s20;

      };
      struct Outputs{
        int32_t s112_tracked_index;
        double s265_d_star;
        double s264_v_star;
        double s262_x_r;
        double s263_y_r;
        double s266_psi_r;
        double s267_psi_r_dot;
        double s268_K_r;
        double s269_Delta_l;
        double s270_Delta_l_dot;
        bool s115_output_valid;
        bool s116_need_more_path_input_data;
        int32_t s272_read_position;
        int32_t s274_minimal_read_position;

      };
    };

  // end of namespace for Sys1001_process_data

  class simulation {
    public:


    // state update
    // instance of Sys1000_store_input_data
    Sys1000_store_input_data block_11_subsystem_Sys1000_store_input_data;
    CircularBuffer block_1_instance = CircularBuffer(10000);
    CircularBufferPtr block_1_ptr = &block_1_instance;
    // instance of Sys1001_process_data
    Sys1001_process_data block_247_subsystem_Sys1001_process_data;
    CircularBuffer block_3_instance = CircularBuffer(10000);
    CircularBufferPtr block_3_ptr = &block_3_instance;
    CircularBuffer block_2_instance = CircularBuffer(10000);
    CircularBufferPtr block_2_ptr = &block_2_instance;
    CircularBuffer block_5_instance = CircularBuffer(10000);
    CircularBufferPtr block_5_ptr = &block_5_instance;
    CircularBuffer block_4_instance = CircularBuffer(10000);
    CircularBufferPtr block_4_ptr = &block_4_instance;
    double block_249_mem;
    int32_t block_251_mem;


    // state update


    //
    // cached output values
    //

    CircularBufferPtr s17__block_1;
    int32_t s294__block_253;
    int32_t s295__block_254;
    int32_t head_index__block_255;
    double distance_at_the_end_of_horizon__block_256;
    CircularBufferPtr s19__block_3;
    CircularBufferPtr s18__block_2;
    CircularBufferPtr s21__block_5;
    CircularBufferPtr s20__block_4;
    int32_t tracked_index__block_247;
    double K_r__block_247;
    double psi_r_dot__block_247;
    int32_t read_position__block_247;
    double s290__block_249;
    bool output_valid__block_247;
    int32_t s289__block_248;
    double s276__block_247;
    double d_star__block_250;
    double distance_ahead__block_257;
    double psi_r__block_247;
    double y_r__block_247;
    bool need_more_path_input_data__block_247;
    int32_t s302__block_261;
    int32_t s292__block_251;
    int32_t s288__block_247;
    int32_t s293_minimal_read_position__block_252;
    int32_t s299__block_258;
    int32_t s300__block_259;
    int32_t s301__block_260;
    int32_t elements_free_to_write__block_262;
    double x_r__block_247;
    double v_star__block_247;
    double Delta_l_dot__block_247;
    double Delta_l__block_247;

    // API-function resetStates
    void resetStates() { // created by cpp_define_function

      // reset state of subsystem embedded by 11
      block_11_subsystem_Sys1000_store_input_data.resetStates();
      block_1_ptr->reset();
      // reset state of subsystem embedded by 247
      block_247_subsystem_Sys1001_process_data.resetStates();
      block_3_ptr->reset();
      block_2_ptr->reset();
      block_5_ptr->reset();
      block_4_ptr->reset();
      block_249_mem = 0;
      block_251_mem = 0;
    }
    // output signals of  resetStates
    struct Outputs_resetStates{
      ;

    };
    // input signals of resetStates
    struct Inputs_resetStates{
      ;

    };
    // wrapper function for resetStates
    Outputs_resetStates resetStates__(Inputs_resetStates inputs) {
      Outputs_resetStates outputs;

      resetStates();

      return outputs;
    }
    // API-function updateStates
    void updateStates(double x, double y_sample, double Ts, double d_sample, bool async_input_data_valid, double psi_sample, double y, double x_sample, bool input_sample_valid, double K_sample) { // created by cpp_define_function


      // restoring the signals s17, s294, s295, head_index, distance_at_the_end_of_horizon, s19, s18, s21, s20, tracked_index, K_r, psi_r_dot, read_position, s290, output_valid, s289, s276, d_star, distance_ahead, psi_r, y_r, need_more_path_input_data, s302, s292, s288, s293_minimal_read_position, s299, s300, s301, elements_free_to_write, x_r, v_star, Delta_l_dot, Delta_l from the states 
      CircularBufferPtr &s17 = s17__block_1;
      int32_t &s294 = s294__block_253;
      int32_t &s295 = s295__block_254;
      int32_t &head_index = head_index__block_255;
      double &distance_at_the_end_of_horizon = distance_at_the_end_of_horizon__block_256;
      CircularBufferPtr &s19 = s19__block_3;
      CircularBufferPtr &s18 = s18__block_2;
      CircularBufferPtr &s21 = s21__block_5;
      CircularBufferPtr &s20 = s20__block_4;
      int32_t &tracked_index = tracked_index__block_247;
      double &K_r = K_r__block_247;
      double &psi_r_dot = psi_r_dot__block_247;
      int32_t &read_position = read_position__block_247;
      double &s290 = s290__block_249;
      bool &output_valid = output_valid__block_247;
      int32_t &s289 = s289__block_248;
      double &s276 = s276__block_247;
      double &d_star = d_star__block_250;
      double &distance_ahead = distance_ahead__block_257;
      double &psi_r = psi_r__block_247;
      double &y_r = y_r__block_247;
      bool &need_more_path_input_data = need_more_path_input_data__block_247;
      int32_t &s302 = s302__block_261;
      int32_t &s292 = s292__block_251;
      int32_t &s288 = s288__block_247;
      int32_t &s293_minimal_read_position = s293_minimal_read_position__block_252;
      int32_t &s299 = s299__block_258;
      int32_t &s300 = s300__block_259;
      int32_t &s301 = s301__block_260;
      int32_t &elements_free_to_write = elements_free_to_write__block_262;
      double &x_r = x_r__block_247;
      double &v_star = v_star__block_247;
      double &Delta_l_dot = Delta_l_dot__block_247;
      double &Delta_l = Delta_l__block_247;


      // calculating the block outputs in the following order 
      // that depend on y_sample, d_sample, async_input_data_valid, psi_sample, x_sample, K_sample, x, Ts, y, input_sample_valid
      // dependencies that require a state update are  


      if (async_input_data_valid == 1) {
        { // subsystem Sys1000_store_input_data
          block_11_subsystem_Sys1000_store_input_data.updateStates(y_sample, s19, d_sample, s18, K_sample, psi_sample, s17, x_sample, s21, s20);
        }

      }
      if (input_sample_valid == 1) {
        { // subsystem Sys1001_process_data
          block_247_subsystem_Sys1001_process_data.updateStates(x, s19, Ts, s18, y, s17);
        }

      }
      block_249_mem = d_star;
      block_251_mem = s293_minimal_read_position;

      // calculating the block outputs in the following order 
      // that depend on 
      // dependencies that require a state update are  


    }
    // output signals of  updateStates
    struct Outputs_updateStates{
      ;

    };
    // input signals of updateStates
    struct Inputs_updateStates{
      double x;
      double y_sample;
      double Ts;
      double d_sample;
      bool async_input_data_valid;
      double psi_sample;
      double y;
      double x_sample;
      bool input_sample_valid;
      double K_sample;

    };
    // wrapper function for updateStates
    Outputs_updateStates updateStates__(Inputs_updateStates inputs) {
      Outputs_updateStates outputs;

      updateStates(inputs.x, inputs.y_sample, inputs.Ts, inputs.d_sample, inputs.async_input_data_valid, inputs.psi_sample, inputs.y, inputs.x_sample, inputs.input_sample_valid, inputs.K_sample);

      return outputs;
    }
    // API-function calcResults_1 to compute: output_valid, need_more_path_input_data, distance_at_the_end_of_horizon, distance_ahead, head_index, read_position, elements_free_to_write, tracked_index, d_star, v_star, x_r, y_r, psi_r, K_r, psi_r_dot, Delta_l, Delta_l_dot
    void calcResults_1(bool &output_valid, bool &need_more_path_input_data, double &distance_at_the_end_of_horizon, double &distance_ahead, int32_t &head_index, int32_t &read_position, int32_t &elements_free_to_write, int32_t &tracked_index, double &d_star, double &v_star, double &x_r, double &y_r, double &psi_r, double &K_r, double &psi_r_dot, double &Delta_l, double &Delta_l_dot, double x, double Delta_u, double y, double velocity_, bool input_sample_valid) { // created by cpp_define_function
      CircularBufferPtr s17;
      int32_t s294;
      int32_t s295;
      CircularBufferPtr s19;
      CircularBufferPtr s18;
      CircularBufferPtr s21;
      CircularBufferPtr s20;
      double s290;
      int32_t s289;
      double s276;
      int32_t s302;
      int32_t s292;
      int32_t s288;
      int32_t s293_minimal_read_position;
      int32_t s299;
      int32_t s300;
      int32_t s301;


      // calculating the block outputs in the following order s17, s294, s295, head_index, distance_at_the_end_of_horizon, s19, s18, s21, s20, tracked_index, K_r, psi_r_dot, read_position, s290, output_valid, s289, s276, d_star, distance_ahead, psi_r, y_r, need_more_path_input_data, s302, s292, s288, s293_minimal_read_position, s299, s300, s301, elements_free_to_write, x_r, v_star, Delta_l_dot, Delta_l
      // that depend on x, Delta_u, y, velocity_, input_sample_valid
      // dependencies that require a state update are s19, y_sample, d_sample, async_input_data_valid, s18, psi_sample, s20, s17, x_sample, s21, K_sample, x, Ts, y, input_sample_valid, d_star, s293_minimal_read_position 

      s17 = block_1_ptr;
      { // calling the custom c++ function s17->get_current_absolute_write_index
        int32_t block_253_out0;
        s17->get_current_absolute_write_index(block_253_out0);
        s294 = block_253_out0;
      }
      s295 = 1.0;
      head_index = s294 - s295;
      { // calling the custom c++ function s17->read_from_absolute_index
        double block_256_out0;
        s17->read_from_absolute_index(block_256_out0, head_index);
        distance_at_the_end_of_horizon = block_256_out0;
      }
      s19 = block_3_ptr;
      s18 = block_2_ptr;
      s21 = block_5_ptr;
      s20 = block_4_ptr;
      if (input_sample_valid == 1) {
        { // subsystem Sys1001_process_data
          int32_t _s112_tracked_index;
          double _s265_d_star;
          double _s264_v_star;
          double _s262_x_r;
          double _s263_y_r;
          double _s266_psi_r;
          double _s267_psi_r_dot;
          double _s268_K_r;
          double _s269_Delta_l;
          double _s270_Delta_l_dot;
          bool _s115_output_valid;
          bool _s116_need_more_path_input_data;
          int32_t _s272_read_position;
          int32_t _s274_minimal_read_position;
          block_247_subsystem_Sys1001_process_data.calcResults_1(_s112_tracked_index, _s265_d_star, _s264_v_star, _s262_x_r, _s263_y_r, _s266_psi_r, _s267_psi_r_dot, _s268_K_r, _s269_Delta_l, _s270_Delta_l_dot, _s115_output_valid, _s116_need_more_path_input_data, _s272_read_position, _s274_minimal_read_position, x, s19, Delta_u, s18, y, s17, velocity_, s21, s20);
          tracked_index = _s112_tracked_index;
          K_r = _s268_K_r;
          psi_r_dot = _s267_psi_r_dot;
          read_position = _s272_read_position;
          output_valid = _s115_output_valid;
          s276 = _s265_d_star;
          psi_r = _s266_psi_r;
          y_r = _s263_y_r;
          need_more_path_input_data = _s116_need_more_path_input_data;
          s288 = _s274_minimal_read_position;
          x_r = _s262_x_r;
          v_star = _s264_v_star;
          Delta_l_dot = _s270_Delta_l_dot;
          Delta_l = _s269_Delta_l;
        }

      }
      s290 = block_249_mem;
      s289 = input_sample_valid  &&  output_valid;
      if (s289) {
        d_star = s276;
      } else {
        d_star = s290;
      }
      distance_ahead = distance_at_the_end_of_horizon - d_star;
      s302 = 10000.0;
      s292 = block_251_mem;
      if (s289) {
        s293_minimal_read_position = s288;
      } else {
        s293_minimal_read_position = s292;
      }
      s299 = head_index - s293_minimal_read_position;
      s300 = 1.0;
      s301 = s299 + s300;
      elements_free_to_write = s302 - s301;

      // saving the signals s17, s294, s295, head_index, distance_at_the_end_of_horizon, s19, s18, s21, s20, tracked_index, K_r, psi_r_dot, read_position, s290, output_valid, s289, s276, d_star, distance_ahead, psi_r, y_r, need_more_path_input_data, s302, s292, s288, s293_minimal_read_position, s299, s300, s301, elements_free_to_write, x_r, v_star, Delta_l_dot, Delta_l into the states 
      s17__block_1 = s17;
      s294__block_253 = s294;
      s295__block_254 = s295;
      head_index__block_255 = head_index;
      distance_at_the_end_of_horizon__block_256 = distance_at_the_end_of_horizon;
      s19__block_3 = s19;
      s18__block_2 = s18;
      s21__block_5 = s21;
      s20__block_4 = s20;
      tracked_index__block_247 = tracked_index;
      K_r__block_247 = K_r;
      psi_r_dot__block_247 = psi_r_dot;
      read_position__block_247 = read_position;
      s290__block_249 = s290;
      output_valid__block_247 = output_valid;
      s289__block_248 = s289;
      s276__block_247 = s276;
      d_star__block_250 = d_star;
      distance_ahead__block_257 = distance_ahead;
      psi_r__block_247 = psi_r;
      y_r__block_247 = y_r;
      need_more_path_input_data__block_247 = need_more_path_input_data;
      s302__block_261 = s302;
      s292__block_251 = s292;
      s288__block_247 = s288;
      s293_minimal_read_position__block_252 = s293_minimal_read_position;
      s299__block_258 = s299;
      s300__block_259 = s300;
      s301__block_260 = s301;
      elements_free_to_write__block_262 = elements_free_to_write;
      x_r__block_247 = x_r;
      v_star__block_247 = v_star;
      Delta_l_dot__block_247 = Delta_l_dot;
      Delta_l__block_247 = Delta_l;
    }
    // output signals of  calcResults_1
    struct Outputs_calcResults_1{
      bool output_valid;
      bool need_more_path_input_data;
      double distance_at_the_end_of_horizon;
      double distance_ahead;
      int32_t head_index;
      int32_t read_position;
      int32_t elements_free_to_write;
      int32_t tracked_index;
      double d_star;
      double v_star;
      double x_r;
      double y_r;
      double psi_r;
      double K_r;
      double psi_r_dot;
      double Delta_l;
      double Delta_l_dot;

    };
    // input signals of calcResults_1
    struct Inputs_calcResults_1{
      double x;
      double Delta_u;
      double y;
      double velocity_;
      bool input_sample_valid;

    };
    // wrapper function for calcResults_1
    Outputs_calcResults_1 calcResults_1__(Inputs_calcResults_1 inputs) {
      Outputs_calcResults_1 outputs;

      calcResults_1(outputs.output_valid, outputs.need_more_path_input_data, outputs.distance_at_the_end_of_horizon, outputs.distance_ahead, outputs.head_index, outputs.read_position, outputs.elements_free_to_write, outputs.tracked_index, outputs.d_star, outputs.v_star, outputs.x_r, outputs.y_r, outputs.psi_r, outputs.K_r, outputs.psi_r_dot, outputs.Delta_l, outputs.Delta_l_dot,   inputs.x, inputs.Delta_u, inputs.y, inputs.velocity_, inputs.input_sample_valid);

      return outputs;
    }
    // all system inputs and outputs combined
    struct Inputs{
      double x;
      double y_sample;
      double Ts;
      double d_sample;
      double Delta_u;
      bool async_input_data_valid;
      double psi_sample;
      double y;
      double velocity_;
      double x_sample;
      bool input_sample_valid;
      double K_sample;

    };
    struct Outputs{
      bool output_valid;
      bool need_more_path_input_data;
      double distance_at_the_end_of_horizon;
      double distance_ahead;
      int32_t head_index;
      int32_t read_position;
      int32_t elements_free_to_write;
      int32_t tracked_index;
      double d_star;
      double v_star;
      double x_r;
      double y_r;
      double psi_r;
      double K_r;
      double psi_r_dot;
      double Delta_l;
      double Delta_l_dot;

    };
    // main step function 
    void step(Outputs & outputs, Inputs const & inputs, int calculate_outputs, bool update_states, bool reset_states) {
      if (reset_states) {
        resetStates();

      }
      if (calculate_outputs==1) {
        calcResults_1(outputs.output_valid, outputs.need_more_path_input_data, outputs.distance_at_the_end_of_horizon, outputs.distance_ahead, outputs.head_index, outputs.read_position, outputs.elements_free_to_write, outputs.tracked_index, outputs.d_star, outputs.v_star, outputs.x_r, outputs.y_r, outputs.psi_r, outputs.K_r, outputs.psi_r_dot, outputs.Delta_l, outputs.Delta_l_dot,   inputs.x, inputs.Delta_u, inputs.y, inputs.velocity_, inputs.input_sample_valid);

      }
      if (update_states) {
        updateStates(inputs.x, inputs.y_sample, inputs.Ts, inputs.d_sample, inputs.async_input_data_valid, inputs.psi_sample, inputs.y, inputs.x_sample, inputs.input_sample_valid, inputs.K_sample);

      }

    }
  };

// end of namespace for simulation





#define S_FUNCTION_LEVEL 2
#define S_FUNCTION_NAME  path_tracker

#include "simstruc.h"

#define IS_PARAM_DOUBLE(pVal) (mxIsNumeric(pVal) && !mxIsLogical(pVal) &&!mxIsEmpty(pVal) && !mxIsSparse(pVal) && !mxIsComplex(pVal) && mxIsDouble(pVal))

//
// S-function methods
//

#define MDL_CHECK_PARAMETERS
#if defined(MDL_CHECK_PARAMETERS)  && defined(MATLAB_MEX_FILE)
static void mdlCheckParameters(SimStruct *S)
{

    const mxArray *pVal0 = ssGetSFcnParam(S,0);

    if ( !IS_PARAM_DOUBLE(pVal0)) {
        ssSetErrorStatus(S, "Parameter to S-function must be a double scalar");
        return;
    } 
}
#endif


static void mdlInitializeSizes(SimStruct *S)
{
    ssSetNumSFcnParams(S, 1);  /* Number of expected parameters */
#if defined(MATLAB_MEX_FILE)
    if (ssGetNumSFcnParams(S) == ssGetSFcnParamsCount(S)) {
        mdlCheckParameters(S);
        if (ssGetErrorStatus(S) != NULL) {
            return;
        }
    } else {
        return; /* Parameter mismatch will be reported by Simulink */
    }
#endif
    ssSetSFcnParamTunable(S, 0, 0);

    // number of cont and discrete states
    ssSetNumContStates(S, 0);
    ssSetNumDiscStates(S, 0);

    // number of input ports
    if (!ssSetNumInputPorts(S, 16  )) return;
    
    // set sizes 
    ssSetInputPortWidth(S, 0, 1); // Ts
    ssSetInputPortWidth(S, 1, 1); // velocity_
    ssSetInputPortWidth(S, 2, 1); // velocity_dot
    ssSetInputPortWidth(S, 3, 1); // x
    ssSetInputPortWidth(S, 4, 1); // y
    ssSetInputPortWidth(S, 5, 1); // x_dot
    ssSetInputPortWidth(S, 6, 1); // y_dot
    ssSetInputPortWidth(S, 7, 1); // Delta_u
    ssSetInputPortWidth(S, 8, 1); // Delta_u_dot
    ssSetInputPortWidth(S, 9, 1); // async_input_data_valid
    ssSetInputPortWidth(S, 10, 1); // input_sample_valid
    ssSetInputPortWidth(S, 11, 1); // d_sample
    ssSetInputPortWidth(S, 12, 1); // x_sample
    ssSetInputPortWidth(S, 13, 1); // y_sample
    ssSetInputPortWidth(S, 14, 1); // psi_sample
    ssSetInputPortWidth(S, 15, 1); // K_sample

    // set datatypes 
    ssSetInputPortDataType(S, 0, SS_DOUBLE); // Ts (double)
    ssSetInputPortDataType(S, 1, SS_DOUBLE); // velocity_ (double)
    ssSetInputPortDataType(S, 2, SS_DOUBLE); // velocity_dot (double)
    ssSetInputPortDataType(S, 3, SS_DOUBLE); // x (double)
    ssSetInputPortDataType(S, 4, SS_DOUBLE); // y (double)
    ssSetInputPortDataType(S, 5, SS_DOUBLE); // x_dot (double)
    ssSetInputPortDataType(S, 6, SS_DOUBLE); // y_dot (double)
    ssSetInputPortDataType(S, 7, SS_DOUBLE); // Delta_u (double)
    ssSetInputPortDataType(S, 8, SS_DOUBLE); // Delta_u_dot (double)
    ssSetInputPortDataType(S, 9, SS_BOOLEAN); // async_input_data_valid (bool)
    ssSetInputPortDataType(S, 10, SS_BOOLEAN); // input_sample_valid (bool)
    ssSetInputPortDataType(S, 11, SS_DOUBLE); // d_sample (double)
    ssSetInputPortDataType(S, 12, SS_DOUBLE); // x_sample (double)
    ssSetInputPortDataType(S, 13, SS_DOUBLE); // y_sample (double)
    ssSetInputPortDataType(S, 14, SS_DOUBLE); // psi_sample (double)
    ssSetInputPortDataType(S, 15, SS_DOUBLE); // K_sample (double)

    // set direct feedthough (for input signals that are needed to compute the system outputs)
    ssSetInputPortDirectFeedThrough(S, 3, 1); // x
    ssSetInputPortDirectFeedThrough(S, 7, 1); // Delta_u
    ssSetInputPortDirectFeedThrough(S, 4, 1); // y
    ssSetInputPortDirectFeedThrough(S, 1, 1); // velocity_
    ssSetInputPortDirectFeedThrough(S, 10, 1); // input_sample_valid

    // number of output ports
    if (!ssSetNumOutputPorts(S, 17)) return;

    ssSetOutputPortWidth(S, 0, 1); // output_valid
    ssSetOutputPortWidth(S, 1, 1); // need_more_path_input_data
    ssSetOutputPortWidth(S, 2, 1); // distance_at_the_end_of_horizon
    ssSetOutputPortWidth(S, 3, 1); // distance_ahead
    ssSetOutputPortWidth(S, 4, 1); // head_index
    ssSetOutputPortWidth(S, 5, 1); // read_position
    ssSetOutputPortWidth(S, 6, 1); // elements_free_to_write
    ssSetOutputPortWidth(S, 7, 1); // tracked_index
    ssSetOutputPortWidth(S, 8, 1); // d_star
    ssSetOutputPortWidth(S, 9, 1); // v_star
    ssSetOutputPortWidth(S, 10, 1); // x_r
    ssSetOutputPortWidth(S, 11, 1); // y_r
    ssSetOutputPortWidth(S, 12, 1); // psi_r
    ssSetOutputPortWidth(S, 13, 1); // K_r
    ssSetOutputPortWidth(S, 14, 1); // psi_r_dot
    ssSetOutputPortWidth(S, 15, 1); // Delta_l
    ssSetOutputPortWidth(S, 16, 1); // Delta_l_dot

    ssSetOutputPortDataType(S, 0, SS_BOOLEAN); // output_valid (bool)
    ssSetOutputPortDataType(S, 1, SS_BOOLEAN); // need_more_path_input_data (bool)
    ssSetOutputPortDataType(S, 2, SS_DOUBLE); // distance_at_the_end_of_horizon (double)
    ssSetOutputPortDataType(S, 3, SS_DOUBLE); // distance_ahead (double)
    ssSetOutputPortDataType(S, 4, SS_INT32); // head_index (int32_t)
    ssSetOutputPortDataType(S, 5, SS_INT32); // read_position (int32_t)
    ssSetOutputPortDataType(S, 6, SS_INT32); // elements_free_to_write (int32_t)
    ssSetOutputPortDataType(S, 7, SS_INT32); // tracked_index (int32_t)
    ssSetOutputPortDataType(S, 8, SS_DOUBLE); // d_star (double)
    ssSetOutputPortDataType(S, 9, SS_DOUBLE); // v_star (double)
    ssSetOutputPortDataType(S, 10, SS_DOUBLE); // x_r (double)
    ssSetOutputPortDataType(S, 11, SS_DOUBLE); // y_r (double)
    ssSetOutputPortDataType(S, 12, SS_DOUBLE); // psi_r (double)
    ssSetOutputPortDataType(S, 13, SS_DOUBLE); // K_r (double)
    ssSetOutputPortDataType(S, 14, SS_DOUBLE); // psi_r_dot (double)
    ssSetOutputPortDataType(S, 15, SS_DOUBLE); // Delta_l (double)
    ssSetOutputPortDataType(S, 16, SS_DOUBLE); // Delta_l_dot (double)

    // sample times
    ssSetNumSampleTimes(S, 1);
    
    // define storage
    ssSetNumRWork(S, 0);
    ssSetNumIWork(S, 0);
    ssSetNumPWork(S, 1); // reserve element in the pointers vector
    ssSetNumModes(S, 0); // to store a C++ object
    ssSetNumNonsampledZCs(S, 0);

    // operating point
    ssSetOperatingPointCompliance(S, USE_DEFAULT_OPERATING_POINT);

    // general options
    ssSetOptions(S, 0);         
}




static void mdlInitializeSampleTimes(SimStruct *S)
{
    ssSetSampleTime(S, 0, mxGetScalar(ssGetSFcnParam(S, 0)));
    ssSetOffsetTime(S, 0, 0.0);
    ssSetModelReferenceSampleTimeDefaultInheritance(S);
}

#define MDL_START
#if defined(MDL_START) 
  static void mdlStart(SimStruct *S)
  {
      ssGetPWork(S)[0] = (void *) new simulation; // store new C++ object in the

      simulation *c = (simulation *) ssGetPWork(S)[0];
      
      // ORTD I/O structures
      simulation::Inputs inputs;
      simulation::Outputs outputs;

      // reset system
      c->step( outputs, inputs, false, false, true ); 
  }
#endif /*  MDL_START */

static void mdlOutputs(SimStruct *S, int_T tid)
{
    simulation *c = (simulation *) ssGetPWork(S)[0];
    
    // inputs
    InputRealPtrsType uPtrs3 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,3);
    InputRealPtrsType uPtrs7 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,7);
    InputRealPtrsType uPtrs4 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,4);
    InputRealPtrsType uPtrs1 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,1);
    InputBooleanPtrsType uPtrs10 = (InputBooleanPtrsType) ssGetInputPortSignalPtrs(S,10);

    
    // outputs
    boolean_T *y0 = (boolean_T *) ssGetOutputPortSignal(S, 0);
    boolean_T *y1 = (boolean_T *) ssGetOutputPortSignal(S, 1);
    real_T *y2 = (real_T *) ssGetOutputPortSignal(S, 2);
    real_T *y3 = (real_T *) ssGetOutputPortSignal(S, 3);
    int32_T *y4 = (int32_T *) ssGetOutputPortSignal(S, 4);
    int32_T *y5 = (int32_T *) ssGetOutputPortSignal(S, 5);
    int32_T *y6 = (int32_T *) ssGetOutputPortSignal(S, 6);
    int32_T *y7 = (int32_T *) ssGetOutputPortSignal(S, 7);
    real_T *y8 = (real_T *) ssGetOutputPortSignal(S, 8);
    real_T *y9 = (real_T *) ssGetOutputPortSignal(S, 9);
    real_T *y10 = (real_T *) ssGetOutputPortSignal(S, 10);
    real_T *y11 = (real_T *) ssGetOutputPortSignal(S, 11);
    real_T *y12 = (real_T *) ssGetOutputPortSignal(S, 12);
    real_T *y13 = (real_T *) ssGetOutputPortSignal(S, 13);
    real_T *y14 = (real_T *) ssGetOutputPortSignal(S, 14);
    real_T *y15 = (real_T *) ssGetOutputPortSignal(S, 15);
    real_T *y16 = (real_T *) ssGetOutputPortSignal(S, 16);

    // ORTD I/O structures
    simulation::Inputs inputs;
    simulation::Outputs outputs;

    
    inputs.x = *uPtrs3[0];
    inputs.Delta_u = *uPtrs7[0];
    inputs.y = *uPtrs4[0];
    inputs.velocity_ = *uPtrs1[0];
    inputs.input_sample_valid = *uPtrs10[0];


    // compute the system outputs
    c->step( outputs, inputs, true, false, false ); 
    
    y0[0] = outputs.output_valid;
    y1[0] = outputs.need_more_path_input_data;
    y2[0] = outputs.distance_at_the_end_of_horizon;
    y3[0] = outputs.distance_ahead;
    y4[0] = outputs.head_index;
    y5[0] = outputs.read_position;
    y6[0] = outputs.elements_free_to_write;
    y7[0] = outputs.tracked_index;
    y8[0] = outputs.d_star;
    y9[0] = outputs.v_star;
    y10[0] = outputs.x_r;
    y11[0] = outputs.y_r;
    y12[0] = outputs.psi_r;
    y13[0] = outputs.K_r;
    y14[0] = outputs.psi_r_dot;
    y15[0] = outputs.Delta_l;
    y16[0] = outputs.Delta_l_dot;

    
    UNUSED_ARG(tid);
}                                                


#define MDL_UPDATE
static void mdlUpdate(SimStruct *S, int_T tid)
{
    InputRealPtrsType uPtrs  = ssGetInputPortRealSignalPtrs(S,0);
    simulation *c = (simulation *) ssGetPWork(S)[0];

    simulation::Inputs inputs;
    simulation::Outputs outputs;

    InputRealPtrsType uPtrs3 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,3);
    InputRealPtrsType uPtrs13 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,13);
    InputRealPtrsType uPtrs0 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,0);
    InputRealPtrsType uPtrs11 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,11);
    InputBooleanPtrsType uPtrs9 = (InputBooleanPtrsType) ssGetInputPortSignalPtrs(S,9);
    InputRealPtrsType uPtrs14 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,14);
    InputRealPtrsType uPtrs4 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,4);
    InputRealPtrsType uPtrs12 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,12);
    InputBooleanPtrsType uPtrs10 = (InputBooleanPtrsType) ssGetInputPortSignalPtrs(S,10);
    InputRealPtrsType uPtrs15 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,15);


    UNUSED_ARG(tid); /* not used in single tasking mode */
    
    inputs.x = *uPtrs3[0];
    inputs.y_sample = *uPtrs13[0];
    inputs.Ts = *uPtrs0[0];
    inputs.d_sample = *uPtrs11[0];
    inputs.async_input_data_valid = *uPtrs9[0];
    inputs.psi_sample = *uPtrs14[0];
    inputs.y = *uPtrs4[0];
    inputs.x_sample = *uPtrs12[0];
    inputs.input_sample_valid = *uPtrs10[0];
    inputs.K_sample = *uPtrs15[0];


    // update the states of the system
    c->step( outputs, inputs, false, true, false ); 
}


static void mdlTerminate(SimStruct *S)
{
    simulation *c = (simulation *) ssGetPWork(S)[0]; // retrieve and destroy C++
    delete c;                                  // object in the termination
}                                              // function

/*=============================*
 * Required S-function trailer *
 *=============================*/

#ifdef  MATLAB_MEX_FILE    /* Is this file being compiled as a MEX-file? */
#include "simulink.c"      /* MEX-file interface mechanism */
#else
#include "cg_sfun.h"       /* Code generation registration function */
#endif


        
        