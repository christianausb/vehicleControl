/*  File    : lateral_path_transformer.cpp
 *  Abstract:
 *
 *      This is code that was automatically generated from an OpenRTDynamics 2 system
 *      using the Simulink s-function target. From the Matlab command prompt type
 *
 *          mex lateral_path_transformer.cpp
 * 
 *      to compile the s-function.
 *
 *      WARNING: Do not edit this file manually. Your changes might be lost.
 *
 *
 *  Configured input signals:
 *
 *  +-------+------------------------+---------+--------+-------+----------------+--------------------------------------------------------------------+
 *  | #port | input signal,  to -->  | outputs | update | reset | datatype (c++) | description                                                        |
 *  +-------+------------------------+---------+--------+-------+----------------+--------------------------------------------------------------------+
 *  |   0   |           Ts           |         |   X    |       |     double     | sampling time [s]                                                  |
 *  |   1   |       wheelbase        |         |   X    |       |     double     | wheelbase (l_r) [m]                                                |
 *  |   2   |       velocity_        |    X    |   X    |       |     double     | vehicle velocity [m/s]                                             |
 *  |   3   |       Delta_l_r        |    X    |        |       |     double     | lateral deviation to the path [m]                                  |
 *  |   4   |     Delta_l_r_dot      |    X    |        |       |     double     | 1st-order time derivative of lateral deviation to the path [m/s]   |
 *  |   5   |    Delta_l_r_dotdot    |    X    |        |       |     double     | 2nd-order time derivative of lateral deviation to the path [m/s^2] |
 *  |   6   |           d0           |    X    |        |       |     double     | initial state d0 [m]                                               |
 *  |   7   |           x0           |    X    |        |       |     double     | initial state x0 [m]                                               |
 *  |   8   |           y0           |    X    |        |       |     double     | initial state y0 [m]                                               |
 *  |   9   |          psi0          |    X    |        |       |     double     | initial state psi0 [rad]                                           |
 *  |   10  |         delta0         |         |        |       |     double     | initial state delta0 [rad]                                         |
 *  |   11  |       delta_dot0       |         |        |       |     double     | initial state delta_dot0 [rad/s]                                   |
 *  |   12  | async_input_data_valid |         |   X    |       |      bool      |                                                                    |
 *  |   13  |   input_sample_valid   |    X    |   X    |       |      bool      |                                                                    |
 *  |   14  |        d_sample        |         |   X    |       |     double     |                                                                    |
 *  |   15  |        x_sample        |         |   X    |       |     double     |                                                                    |
 *  |   16  |        y_sample        |         |   X    |       |     double     |                                                                    |
 *  |   17  |       psi_sample       |         |   X    |       |     double     |                                                                    |
 *  |   18  |        K_sample        |         |   X    |       |     double     |                                                                    |
 *  +-------+------------------------+---------+--------+-------+----------------+--------------------------------------------------------------------+
 *
 *  Configured output signals:
 *
 *  +-------+--------------------------------+----------------+
 *  | #port |          input signal          | datatype (c++) |
 *  +-------+--------------------------------+----------------+
 *  |   0   |          output_valid          |      bool      |
 *  |   1   |   need_more_path_input_data    |      bool      |
 *  |   2   | distance_at_the_end_of_horizon |     double     |
 *  |   3   |         distance_ahead         |     double     |
 *  |   4   |           head_index           |    int32_t     |
 *  |   5   |         read_position          |    int32_t     |
 *  |   6   |     elements_free_to_write     |    int32_t     |
 *  |   7   |         tracked_index          |    int32_t     |
 *  |   8   |          path_d_star           |     double     |
 *  |   9   |             path_d             |     double     |
 *  |   10  |             path_x             |     double     |
 *  |   11  |             path_y             |     double     |
 *  |   12  |            path_psi            |     double     |
 *  |   13  |             path_K             |     double     |
 *  |   14  |         vehicle_delta          |     double     |
 *  |   15  |       vehicle_delta_dot        |     double     |
 *  |   16  |          vehicle_psi           |     double     |
 *  |   17  |        vehicle_psi_dot         |     double     |
 *  |   18  |            velocity            |     double     |
 *  +-------+--------------------------------+----------------+
 *
 */

#include <iostream>

#include <stdio.h>
#include <math.h>

// custom code


class CircularBuffer {
public:

    double *state_memory;
    int n, write_cnt, abs_cnt;

    CircularBuffer(int n) {
    
        this->state_memory = new double[n];
        this->n         = n;
        this->write_cnt = 0;
        this->abs_cnt   = 0;   
    }
    
    ~CircularBuffer() {
    
        delete[] this->state_memory;
    }

    void reset() {
    
        this->write_cnt = 0;
        this->abs_cnt   = 0;

        for (int i = 0; i < n; ++i) {
            state_memory[i] = 0;
        }
    }
    
    void get_current_absolute_write_index(int & index) {
        index = this->abs_cnt;

        // printf( "get_current_absolute_write_index (%p): %d\n", this, this->abs_cnt );
    }

    void get_absolute_minimal_index(int & index) {
        index = this->abs_cnt - this->n;

        if (index < 0) {
            index = 0;
        }
    }

    void read_from_absolute_index(double & output, int abs_index) {
    
        int diff = this->abs_cnt - abs_index; // >= 0
    
        int arr_index = this->write_cnt - diff;
        
        if (arr_index < 0) {
          arr_index = this->n - (-arr_index);
        }
        
        if (arr_index >= this->n) { // check this
        
            // error
            // printf("read_from_absolute_index: bad index %d (maximal valid index: %d)\n", abs_index, this->abs_cnt-1);
            output = NAN;
            
        } else if ( arr_index < 0 ) {
        
            // error
            // printf("read_from_absolute_index: bad index %d (maximal valid index: %d)\n", abs_index, this->abs_cnt-1);
            output = NAN;
            
        } else {
        
            output = state_memory[ arr_index ];
            
        }        
    }
    
    void append_to_buffer(double value) {
    
        state_memory[ this->write_cnt ] = value;
        
        this->abs_cnt++;
        this->write_cnt++;
        
        if (this->write_cnt >= this->n) {
        
            // wrap
            this->write_cnt = 0;
        }

        // printf( "append_to_buffer (%p): %d %f\n", this, this->abs_cnt, value );

    }

};

typedef CircularBuffer *CircularBufferPtr;

// end of custom code

// namespace for simulation {
  // global variables

  // namespace for Sys1000_store_input_data {
    // global variables

    class Sys1000_store_input_data {
      public:


      // state update


      // state update


      //
      // cached output values
      //


      // API-function resetStates
      void resetStates() { // created by cpp_define_function

      }
      // API-function updateStates
      void updateStates(CircularBufferPtr s21, CircularBufferPtr s24, double psi_sample, double x_sample, CircularBufferPtr s20, CircularBufferPtr s23, double K_sample, double y_sample, double d_sample, CircularBufferPtr s22) { // created by cpp_define_function


        // restoring the signals  from the states 


        // calculating the block outputs in the following order 
        // that depend on d_sample, s20, x_sample, s21, y_sample, s22, psi_sample, s23, K_sample, s24
        // dependencies that require a state update are  


        { // calling the custom c++ function s20->append_to_buffer
          s20->append_to_buffer(d_sample);
        }
        { // calling the custom c++ function s21->append_to_buffer
          s21->append_to_buffer(x_sample);
        }
        { // calling the custom c++ function s22->append_to_buffer
          s22->append_to_buffer(y_sample);
        }
        { // calling the custom c++ function s23->append_to_buffer
          s23->append_to_buffer(psi_sample);
        }
        { // calling the custom c++ function s24->append_to_buffer
          s24->append_to_buffer(K_sample);
        }

        // calculating the block outputs in the following order 
        // that depend on 
        // dependencies that require a state update are  


      }
      // API-function calcResults_1
      void calcResults_1() { // created by cpp_define_function


        // calculating the block outputs in the following order 
        // that depend on 
        // dependencies that require a state update are d_sample, s20, x_sample, s21, y_sample, s22, psi_sample, s23, K_sample, s24 


        // saving the signals  into the states 
      }
      // all system inputs and outputs combined
      struct Inputs{
        CircularBufferPtr s21;
        CircularBufferPtr s24;
        double psi_sample;
        double x_sample;
        CircularBufferPtr s20;
        CircularBufferPtr s23;
        double K_sample;
        double y_sample;
        double d_sample;
        CircularBufferPtr s22;

      };
      struct Outputs{
        ;

      };
    };

  // end of namespace for Sys1000_store_input_data

  // namespace for Sys1001_process_data {
    // global variables

    // namespace for Sys1002_tracker {
      // global variables

      // namespace for Sys1003_optim_loop {
        // global variables

        class Sys1003_optim_loop {
          public:


          // state update
          double block_70_mem;
          int32_t block_67_mem;
          int32_t block_52_mem;


          //
          // cached output values
          //

          double s83__block_70;
          int32_t s80_shared_counter__block_67;
          int32_t s81__block_68;
          bool s82__block_69;
          double s84_J_star__block_71;
          int32_t s66__block_53;
          int32_t s65_Delta_index__block_52;
          int32_t s64_Delta_index__block_51;
          int32_t s67_index_to_investigate_index_to_investigate__block_54;
          double s68__block_55;
          double s70__block_57;
          double s72__block_59;
          double s69__block_56;
          double s71__block_58;
          double s73__block_60;
          double s74__block_61;
          double s75_J_to_verify_J_to_verify__block_62;
          bool s76_step_caused_improvement__block_63;
          double s77_J_star__block_64;
          bool s85_reached_the_end_of_currently_available_path_data__block_72;
          bool s91_reached_minimum__block_78;
          int32_t s92__block_79;
          int32_t s86__block_73;
          int32_t s87__block_74;
          int32_t s88__block_75;
          bool s90__block_77;
          int32_t s93_loop_until__block_80;
          int32_t s94__block_81;
          int32_t s95_index_head__block_82;

          // API-function resetStates
          void resetStates() { // created by cpp_define_function

            block_70_mem = 0.0;
            block_67_mem = 0;
            block_52_mem = 0;
          }
          // API-function updateStates
          void updateStates() { // created by cpp_define_function
            int32_t s78_cnt_increase;
            int32_t s79;


            // restoring the signals s83, s80_shared_counter, s81, s82, s84_J_star, s66, s65_Delta_index, s64_Delta_index, s67_index_to_investigate_index_to_investigate, s68, s70, s72, s69, s71, s73, s74, s75_J_to_verify_J_to_verify, s76_step_caused_improvement, s77_J_star, s85_reached_the_end_of_currently_available_path_data, s91_reached_minimum, s92, s86, s87, s88, s90, s93_loop_until, s94, s95_index_head from the states 
            double &s83 = s83__block_70;
            int32_t &s80_shared_counter = s80_shared_counter__block_67;
            int32_t &s81 = s81__block_68;
            bool &s82 = s82__block_69;
            double &s84_J_star = s84_J_star__block_71;
            int32_t &s66 = s66__block_53;
            int32_t &s65_Delta_index = s65_Delta_index__block_52;
            int32_t &s64_Delta_index = s64_Delta_index__block_51;
            int32_t &s67_index_to_investigate_index_to_investigate = s67_index_to_investigate_index_to_investigate__block_54;
            double &s68 = s68__block_55;
            double &s70 = s70__block_57;
            double &s72 = s72__block_59;
            double &s69 = s69__block_56;
            double &s71 = s71__block_58;
            double &s73 = s73__block_60;
            double &s74 = s74__block_61;
            double &s75_J_to_verify_J_to_verify = s75_J_to_verify_J_to_verify__block_62;
            bool &s76_step_caused_improvement = s76_step_caused_improvement__block_63;
            double &s77_J_star = s77_J_star__block_64;
            bool &s85_reached_the_end_of_currently_available_path_data = s85_reached_the_end_of_currently_available_path_data__block_72;
            bool &s91_reached_minimum = s91_reached_minimum__block_78;
            int32_t &s92 = s92__block_79;
            int32_t &s86 = s86__block_73;
            int32_t &s87 = s87__block_74;
            int32_t &s88 = s88__block_75;
            bool &s90 = s90__block_77;
            int32_t &s93_loop_until = s93_loop_until__block_80;
            int32_t &s94 = s94__block_81;
            int32_t &s95_index_head = s95_index_head__block_82;


            // calculating the block outputs in the following order s78_cnt_increase, s79
            // that depend on 
            // dependencies that require a state update are  

            s78_cnt_increase = 1;
            s79 = s80_shared_counter + s78_cnt_increase;

            block_70_mem = s77_J_star;
            block_67_mem = s79;
            block_52_mem = s64_Delta_index;
          }
          // API-function calcResults_1 to compute: s65_Delta_index, s77_J_star, s91_reached_minimum, s85_reached_the_end_of_currently_available_path_data, s95_index_head, s67_index_to_investigate_index_to_investigate, s75_J_to_verify_J_to_verify, s93_loop_until
          void calcResults_1(int32_t &s65_Delta_index, double &s77_J_star, bool &s91_reached_minimum, bool &s85_reached_the_end_of_currently_available_path_data, int32_t &s95_index_head, int32_t &s67_index_to_investigate_index_to_investigate, double &s75_J_to_verify_J_to_verify, int32_t &s93_loop_until, double s46_J_star_0, int32_t s33, int32_t s112_Delta_index_track, int32_t s63_search_index_increment, CircularBufferPtr s21, double s371_x, CircularBufferPtr s22, double s372_y, int32_t s36_index_head, CircularBufferPtr s20) { // created by cpp_define_function
            double s83;
            int32_t s80_shared_counter;
            int32_t s81;
            bool s82;
            double s84_J_star;
            int32_t s66;
            int32_t s64_Delta_index;
            double s68;
            double s70;
            double s72;
            double s69;
            double s71;
            double s73;
            double s74;
            bool s76_step_caused_improvement;
            int32_t s92;
            int32_t s86;
            int32_t s87;
            int32_t s88;
            bool s90;
            int32_t s94;


            // calculating the block outputs in the following order s83, s80_shared_counter, s81, s82, s84_J_star, s66, s65_Delta_index, s64_Delta_index, s67_index_to_investigate_index_to_investigate, s68, s70, s72, s69, s71, s73, s74, s75_J_to_verify_J_to_verify, s76_step_caused_improvement, s77_J_star, s85_reached_the_end_of_currently_available_path_data, s91_reached_minimum, s92, s86, s87, s88, s90, s93_loop_until, s94, s95_index_head
            // that depend on s46_J_star_0, s33, s112_Delta_index_track, s63_search_index_increment, s21, s371_x, s22, s372_y, s36_index_head, s20
            // dependencies that require a state update are s77_J_star, s79, s64_Delta_index 

            s83 = block_70_mem;
            s80_shared_counter = block_67_mem;
            s81 = 0;
            s82 = s80_shared_counter == s81;
            if (s82) {
              s84_J_star = s46_J_star_0;
            } else {
              s84_J_star = s83;
            }
            s66 = s33 + s112_Delta_index_track;
            s65_Delta_index = block_52_mem;
            s64_Delta_index = s65_Delta_index + s63_search_index_increment;
            s67_index_to_investigate_index_to_investigate = s66 + s64_Delta_index;
            { // calling the custom c++ function s21->read_from_absolute_index
              double block_55_out0;
              s21->read_from_absolute_index(block_55_out0, s67_index_to_investigate_index_to_investigate);
              s68 = block_55_out0;
            }
            s70 = s68 - s371_x;
            s72 = s70 * s70;
            { // calling the custom c++ function s22->read_from_absolute_index
              double block_56_out0;
              s22->read_from_absolute_index(block_56_out0, s67_index_to_investigate_index_to_investigate);
              s69 = block_56_out0;
            }
            s71 = s69 - s372_y;
            s73 = s71 * s71;
            s74 = s72 + s73;
            s75_J_to_verify_J_to_verify = sqrt(s74);
            s76_step_caused_improvement = s75_J_to_verify_J_to_verify < s84_J_star;
            if (s76_step_caused_improvement) {
              s77_J_star = s75_J_to_verify_J_to_verify;
            } else {
              s77_J_star = s84_J_star;
            }
            s85_reached_the_end_of_currently_available_path_data = s67_index_to_investigate_index_to_investigate >= s36_index_head;
            s91_reached_minimum = !s76_step_caused_improvement;
            s92 = s91_reached_minimum  ||  s85_reached_the_end_of_currently_available_path_data;
            s86 = 1;
            s87 = s67_index_to_investigate_index_to_investigate - s86;
            { // calling the custom c++ function s20->get_absolute_minimal_index
              int32_t block_75_out0;
              s20->get_absolute_minimal_index(block_75_out0);
              s88 = block_75_out0;
            }
            s90 = s87 <= s88;
            s93_loop_until = s92  ||  s90;
            s94 = 1;
            s95_index_head = s36_index_head * s94;

            // saving the signals s83, s80_shared_counter, s81, s82, s84_J_star, s66, s65_Delta_index, s64_Delta_index, s67_index_to_investigate_index_to_investigate, s68, s70, s72, s69, s71, s73, s74, s75_J_to_verify_J_to_verify, s76_step_caused_improvement, s77_J_star, s85_reached_the_end_of_currently_available_path_data, s91_reached_minimum, s92, s86, s87, s88, s90, s93_loop_until, s94, s95_index_head into the states 
            s83__block_70 = s83;
            s80_shared_counter__block_67 = s80_shared_counter;
            s81__block_68 = s81;
            s82__block_69 = s82;
            s84_J_star__block_71 = s84_J_star;
            s66__block_53 = s66;
            s65_Delta_index__block_52 = s65_Delta_index;
            s64_Delta_index__block_51 = s64_Delta_index;
            s67_index_to_investigate_index_to_investigate__block_54 = s67_index_to_investigate_index_to_investigate;
            s68__block_55 = s68;
            s70__block_57 = s70;
            s72__block_59 = s72;
            s69__block_56 = s69;
            s71__block_58 = s71;
            s73__block_60 = s73;
            s74__block_61 = s74;
            s75_J_to_verify_J_to_verify__block_62 = s75_J_to_verify_J_to_verify;
            s76_step_caused_improvement__block_63 = s76_step_caused_improvement;
            s77_J_star__block_64 = s77_J_star;
            s85_reached_the_end_of_currently_available_path_data__block_72 = s85_reached_the_end_of_currently_available_path_data;
            s91_reached_minimum__block_78 = s91_reached_minimum;
            s92__block_79 = s92;
            s86__block_73 = s86;
            s87__block_74 = s87;
            s88__block_75 = s88;
            s90__block_77 = s90;
            s93_loop_until__block_80 = s93_loop_until;
            s94__block_81 = s94;
            s95_index_head__block_82 = s95_index_head;
          }
          // all system inputs and outputs combined
          struct Inputs{
            double s46_J_star_0;
            CircularBufferPtr s21;
            int32_t s112_Delta_index_track;
            double s371_x;
            int32_t s63_search_index_increment;
            double s372_y;
            int32_t s33;
            int32_t s36_index_head;
            CircularBufferPtr s20;
            CircularBufferPtr s22;

          };
          struct Outputs{
            int32_t s65_Delta_index;
            double s77_J_star;
            bool s91_reached_minimum;
            bool s85_reached_the_end_of_currently_available_path_data;
            int32_t s95_index_head;
            int32_t s67_index_to_investigate_index_to_investigate;
            double s75_J_to_verify_J_to_verify;
            int32_t s93_loop_until;

          };
        };

      // end of namespace for Sys1003_optim_loop

      class Sys1002_tracker {
        public:


        // state update
        int32_t block_93_mem;
        // instance of Sys1003_optim_loop
        Sys1003_optim_loop block_83_subsystem_Sys1003_optim_loop;


        // state update


        //
        // cached output values
        //

        int32_t s33__block_20;
        int32_t s112_Delta_index_track__block_93;
        int32_t s38__block_25;
        double s39__block_26;
        double s41__block_28;
        double s43__block_30;
        double s40__block_27;
        double s42__block_29;
        double s44__block_31;
        double s45__block_32;
        double s46_J_star_0__block_33;
        int32_t s59__block_46;
        int32_t s47__block_34;
        int32_t s48__block_35;
        int32_t s49__block_36;
        double s50__block_37;
        double s52__block_39;
        double s54__block_41;
        double s51__block_38;
        double s53__block_40;
        double s55__block_42;
        double s56__block_43;
        double s57__block_44;
        double s58__block_45;
        int32_t s60__block_47;
        bool s61__block_48;
        int32_t s62__block_49;
        int32_t s63_search_index_increment__block_50;
        int32_t s34__block_21;
        int32_t s35__block_22;
        int32_t s36_index_head__block_23;
        int32_t s96_Delta_index_Delta_index__block_83;
        int32_t s111_Delta_index_track_next__block_92;
        int32_t s113_optimal_index_tracked_index__block_94;
        double s97__block_83;
        int32_t s100__block_83;
        int32_t s103__block_84;
        int32_t s104__block_85;
        int32_t s101__block_83;
        int32_t s105__block_86;
        int32_t s106__block_87;
        int32_t s107__block_88;
        double s102__block_83;
        int32_t s108__block_89;
        double s109__block_90;
        double s110__block_91;
        int32_t s114__block_95;
        double s115__block_96;
        double s116_J_star_distance__block_97;
        bool s98_reached_minimum_minimal_distance_reached__block_83;
        bool s99_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data__block_83;

        // API-function resetStates
        void resetStates() { // created by cpp_define_function

          block_93_mem = 1;
          // reset state of subsystem embedded by 83
          block_83_subsystem_Sys1003_optim_loop.resetStates();
        }
        // API-function updateStates
        void updateStates(CircularBufferPtr s21, double s371_x, double s372_y, CircularBufferPtr s20, CircularBufferPtr s22) { // created by cpp_define_function


          // restoring the signals s33, s112_Delta_index_track, s38, s39, s41, s43, s40, s42, s44, s45, s46_J_star_0, s59, s47, s48, s49, s50, s52, s54, s51, s53, s55, s56, s57, s58, s60, s61, s62, s63_search_index_increment, s34, s35, s36_index_head, s96_Delta_index_Delta_index, s111_Delta_index_track_next, s113_optimal_index_tracked_index, s97, s100, s103, s104, s101, s105, s106, s107, s102, s108, s109, s110, s114, s115, s116_J_star_distance, s98_reached_minimum_minimal_distance_reached, s99_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data from the states 
          int32_t &s33 = s33__block_20;
          int32_t &s112_Delta_index_track = s112_Delta_index_track__block_93;
          int32_t &s38 = s38__block_25;
          double &s39 = s39__block_26;
          double &s41 = s41__block_28;
          double &s43 = s43__block_30;
          double &s40 = s40__block_27;
          double &s42 = s42__block_29;
          double &s44 = s44__block_31;
          double &s45 = s45__block_32;
          double &s46_J_star_0 = s46_J_star_0__block_33;
          int32_t &s59 = s59__block_46;
          int32_t &s47 = s47__block_34;
          int32_t &s48 = s48__block_35;
          int32_t &s49 = s49__block_36;
          double &s50 = s50__block_37;
          double &s52 = s52__block_39;
          double &s54 = s54__block_41;
          double &s51 = s51__block_38;
          double &s53 = s53__block_40;
          double &s55 = s55__block_42;
          double &s56 = s56__block_43;
          double &s57 = s57__block_44;
          double &s58 = s58__block_45;
          int32_t &s60 = s60__block_47;
          bool &s61 = s61__block_48;
          int32_t &s62 = s62__block_49;
          int32_t &s63_search_index_increment = s63_search_index_increment__block_50;
          int32_t &s34 = s34__block_21;
          int32_t &s35 = s35__block_22;
          int32_t &s36_index_head = s36_index_head__block_23;
          int32_t &s96_Delta_index_Delta_index = s96_Delta_index_Delta_index__block_83;
          int32_t &s111_Delta_index_track_next = s111_Delta_index_track_next__block_92;
          int32_t &s113_optimal_index_tracked_index = s113_optimal_index_tracked_index__block_94;
          double &s97 = s97__block_83;
          int32_t &s100 = s100__block_83;
          int32_t &s103 = s103__block_84;
          int32_t &s104 = s104__block_85;
          int32_t &s101 = s101__block_83;
          int32_t &s105 = s105__block_86;
          int32_t &s106 = s106__block_87;
          int32_t &s107 = s107__block_88;
          double &s102 = s102__block_83;
          int32_t &s108 = s108__block_89;
          double &s109 = s109__block_90;
          double &s110 = s110__block_91;
          int32_t &s114 = s114__block_95;
          double &s115 = s115__block_96;
          double &s116_J_star_distance = s116_J_star_distance__block_97;
          bool &s98_reached_minimum_minimal_distance_reached = s98_reached_minimum_minimal_distance_reached__block_83;
          bool &s99_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data = s99_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data__block_83;


          // calculating the block outputs in the following order 
          // that depend on s21, s371_x, s372_y, s20, s22
          // dependencies that require a state update are  


          block_93_mem = s111_Delta_index_track_next;

          // calculating the block outputs in the following order 
          // that depend on 
          // dependencies that require a state update are  


        }
        // API-function calcResults_1 to compute: s113_optimal_index_tracked_index, s96_Delta_index_Delta_index, s116_J_star_distance, s98_reached_minimum_minimal_distance_reached, s99_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data
        void calcResults_1(int32_t &s113_optimal_index_tracked_index, int32_t &s96_Delta_index_Delta_index, double &s116_J_star_distance, bool &s98_reached_minimum_minimal_distance_reached, bool &s99_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data, CircularBufferPtr s21, double s371_x, CircularBufferPtr s22, double s372_y, CircularBufferPtr s20) { // created by cpp_define_function
          int32_t s33;
          int32_t s112_Delta_index_track;
          int32_t s38;
          double s39;
          double s41;
          double s43;
          double s40;
          double s42;
          double s44;
          double s45;
          double s46_J_star_0;
          int32_t s59;
          int32_t s47;
          int32_t s48;
          int32_t s49;
          double s50;
          double s52;
          double s54;
          double s51;
          double s53;
          double s55;
          double s56;
          double s57;
          double s58;
          int32_t s60;
          bool s61;
          int32_t s62;
          int32_t s63_search_index_increment;
          int32_t s34;
          int32_t s35;
          int32_t s36_index_head;
          int32_t s111_Delta_index_track_next;
          double s97;
          int32_t s100;
          int32_t s103;
          int32_t s104;
          int32_t s101;
          int32_t s105;
          int32_t s106;
          int32_t s107;
          double s102;
          int32_t s108;
          double s109;
          double s110;
          int32_t s114;
          double s115;


          // calculating the block outputs in the following order s33, s112_Delta_index_track, s38, s39, s41, s43, s40, s42, s44, s45, s46_J_star_0, s59, s47, s48, s49, s50, s52, s54, s51, s53, s55, s56, s57, s58, s60, s61, s62, s63_search_index_increment, s34, s35, s36_index_head, s96_Delta_index_Delta_index, s111_Delta_index_track_next, s113_optimal_index_tracked_index, s97, s100, s103, s104, s101, s105, s106, s107, s102, s108, s109, s110, s114, s115, s116_J_star_distance, s98_reached_minimum_minimal_distance_reached, s99_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data
          // that depend on s21, s371_x, s22, s372_y, s20
          // dependencies that require a state update are s111_Delta_index_track_next, s46_J_star_0, s21, s112_Delta_index_track, s371_x, s63_search_index_increment, s372_y, s33, s36_index_head, s20, s22 

          s33 = 0;
          s112_Delta_index_track = block_93_mem;
          s38 = s33 + s112_Delta_index_track;
          { // calling the custom c++ function s21->read_from_absolute_index
            double block_26_out0;
            s21->read_from_absolute_index(block_26_out0, s38);
            s39 = block_26_out0;
          }
          s41 = s39 - s371_x;
          s43 = s41 * s41;
          { // calling the custom c++ function s22->read_from_absolute_index
            double block_27_out0;
            s22->read_from_absolute_index(block_27_out0, s38);
            s40 = block_27_out0;
          }
          s42 = s40 - s372_y;
          s44 = s42 * s42;
          s45 = s43 + s44;
          s46_J_star_0 = sqrt(s45);
          s59 = 1;
          s47 = s33 + s112_Delta_index_track;
          s48 = 1;
          s49 = s47 - s48;
          { // calling the custom c++ function s21->read_from_absolute_index
            double block_37_out0;
            s21->read_from_absolute_index(block_37_out0, s49);
            s50 = block_37_out0;
          }
          s52 = s50 - s371_x;
          s54 = s52 * s52;
          { // calling the custom c++ function s22->read_from_absolute_index
            double block_38_out0;
            s22->read_from_absolute_index(block_38_out0, s49);
            s51 = block_38_out0;
          }
          s53 = s51 - s372_y;
          s55 = s53 * s53;
          s56 = s54 + s55;
          s57 = sqrt(s56);
          s58 = s46_J_star_0 - s57;
          s60 = 0;
          s61 = s58 > s60;
          s62 = -1;
          if (s61) {
            s63_search_index_increment = s62;
          } else {
            s63_search_index_increment = s59;
          }
          { // calling the custom c++ function s20->get_current_absolute_write_index
            int32_t block_21_out0;
            s20->get_current_absolute_write_index(block_21_out0);
            s34 = block_21_out0;
          }
          s35 = 1;
          s36_index_head = s34 - s35;
          {
            bool _until_condition;
            for (int _i = 0; ; ++_i) {
              { // subsystem Sys1003_optim_loop
                int32_t _s65_Delta_index;
                double _s77_J_star;
                bool _s91_reached_minimum;
                bool _s85_reached_the_end_of_currently_available_path_data;
                int32_t _s95_index_head;
                int32_t _s67_index_to_investigate_index_to_investigate;
                double _s75_J_to_verify_J_to_verify;
                int32_t _s93_loop_until;
                block_83_subsystem_Sys1003_optim_loop.calcResults_1(_s65_Delta_index, _s77_J_star, _s91_reached_minimum, _s85_reached_the_end_of_currently_available_path_data, _s95_index_head, _s67_index_to_investigate_index_to_investigate, _s75_J_to_verify_J_to_verify, _s93_loop_until, s46_J_star_0, s33, s112_Delta_index_track, s63_search_index_increment, s21, s371_x, s22, s372_y, s36_index_head, s20);
                s96_Delta_index_Delta_index = _s65_Delta_index;
                s97 = _s77_J_star;
                s100 = _s95_index_head;
                s101 = _s67_index_to_investigate_index_to_investigate;
                s102 = _s75_J_to_verify_J_to_verify;
                s98_reached_minimum_minimal_distance_reached = _s91_reached_minimum;
                s99_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data = _s85_reached_the_end_of_currently_available_path_data;
                _until_condition = _s93_loop_until;
              }
              { // subsystem Sys1003_optim_loop
                block_83_subsystem_Sys1003_optim_loop.updateStates();
              }
              if (_until_condition) {
                { // subsystem Sys1003_optim_loop
                  block_83_subsystem_Sys1003_optim_loop.resetStates();
                }

                break;
              }
              if (_i >= 1000) {
                { // subsystem Sys1003_optim_loop
                  block_83_subsystem_Sys1003_optim_loop.resetStates();
                }
                break;
              }

            };

          }
          s111_Delta_index_track_next = s112_Delta_index_track + s96_Delta_index_Delta_index;
          s113_optimal_index_tracked_index = s33 + s111_Delta_index_track_next;
          s103 = 0;
          s104 = s100 * s103;
          s105 = 0;
          s106 = s101 * s105;
          s107 = s104 + s106;
          s108 = 0;
          s109 = s102 * s108;
          s110 = s107 + s109;
          s114 = 0;
          s115 = s110 * s114;
          s116_J_star_distance = s97 + s115;

          // saving the signals s33, s112_Delta_index_track, s38, s39, s41, s43, s40, s42, s44, s45, s46_J_star_0, s59, s47, s48, s49, s50, s52, s54, s51, s53, s55, s56, s57, s58, s60, s61, s62, s63_search_index_increment, s34, s35, s36_index_head, s96_Delta_index_Delta_index, s111_Delta_index_track_next, s113_optimal_index_tracked_index, s97, s100, s103, s104, s101, s105, s106, s107, s102, s108, s109, s110, s114, s115, s116_J_star_distance, s98_reached_minimum_minimal_distance_reached, s99_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data into the states 
          s33__block_20 = s33;
          s112_Delta_index_track__block_93 = s112_Delta_index_track;
          s38__block_25 = s38;
          s39__block_26 = s39;
          s41__block_28 = s41;
          s43__block_30 = s43;
          s40__block_27 = s40;
          s42__block_29 = s42;
          s44__block_31 = s44;
          s45__block_32 = s45;
          s46_J_star_0__block_33 = s46_J_star_0;
          s59__block_46 = s59;
          s47__block_34 = s47;
          s48__block_35 = s48;
          s49__block_36 = s49;
          s50__block_37 = s50;
          s52__block_39 = s52;
          s54__block_41 = s54;
          s51__block_38 = s51;
          s53__block_40 = s53;
          s55__block_42 = s55;
          s56__block_43 = s56;
          s57__block_44 = s57;
          s58__block_45 = s58;
          s60__block_47 = s60;
          s61__block_48 = s61;
          s62__block_49 = s62;
          s63_search_index_increment__block_50 = s63_search_index_increment;
          s34__block_21 = s34;
          s35__block_22 = s35;
          s36_index_head__block_23 = s36_index_head;
          s96_Delta_index_Delta_index__block_83 = s96_Delta_index_Delta_index;
          s111_Delta_index_track_next__block_92 = s111_Delta_index_track_next;
          s113_optimal_index_tracked_index__block_94 = s113_optimal_index_tracked_index;
          s97__block_83 = s97;
          s100__block_83 = s100;
          s103__block_84 = s103;
          s104__block_85 = s104;
          s101__block_83 = s101;
          s105__block_86 = s105;
          s106__block_87 = s106;
          s107__block_88 = s107;
          s102__block_83 = s102;
          s108__block_89 = s108;
          s109__block_90 = s109;
          s110__block_91 = s110;
          s114__block_95 = s114;
          s115__block_96 = s115;
          s116_J_star_distance__block_97 = s116_J_star_distance;
          s98_reached_minimum_minimal_distance_reached__block_83 = s98_reached_minimum_minimal_distance_reached;
          s99_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data__block_83 = s99_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data;
        }
        // all system inputs and outputs combined
        struct Inputs{
          CircularBufferPtr s21;
          double s371_x;
          double s372_y;
          CircularBufferPtr s20;
          CircularBufferPtr s22;

        };
        struct Outputs{
          int32_t s113_optimal_index_tracked_index;
          int32_t s96_Delta_index_Delta_index;
          double s116_J_star_distance;
          bool s98_reached_minimum_minimal_distance_reached;
          bool s99_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data;

        };
      };

    // end of namespace for Sys1002_tracker

    // namespace for Sys1004_controller {
      // global variables

      class Sys1004_controller {
        public:


        // state update
        double block_238_mem;
        int32_t block_235_mem;


        // state update


        //
        // cached output values
        //

        double s261__block_238;
        int32_t s258_shared_counter__block_235;
        int32_t s259__block_236;
        bool s260__block_237;
        int32_t s122__block_99;
        int32_t s125__block_102;
        double s126__block_103;
        double s128__block_105;
        double s130__block_107;
        double s127__block_104;
        double s129__block_106;
        double s131__block_108;
        double s132__block_109;
        double s133__block_110;
        int32_t s134__block_111;
        double s135__block_112;
        double s137__block_114;
        double s139__block_116;
        double s136__block_113;
        double s138__block_115;
        double s140__block_117;
        double s141__block_118;
        double s142__block_119;
        bool s143__block_120;
        int32_t s148__block_125;
        int32_t s149__block_126;
        double s198__block_175;
        int32_t s150__block_127;
        int32_t s151__block_128;
        double s203__block_180;
        double s214__block_191;
        double s124__block_101;
        double s153__block_130;
        double s159__block_136;
        double s123__block_100;
        double s152__block_129;
        double s158__block_135;
        double s161__block_138;
        double s155__block_132;
        double s157__block_134;
        double s154__block_131;
        double s156__block_133;
        double s160__block_137;
        double s162__block_139;
        double s163__block_140;
        double s164__block_141;
        double s165__block_142;
        double s166__block_143;
        bool s167__block_144;
        double s168__block_145;
        double s169__block_146;
        double s170__block_147;
        double s171__block_148;
        bool s172__block_149;
        double s173__block_150;
        double s174__block_151;
        double s175__block_152;
        double s176__block_153;
        bool s177__block_154;
        double s178__block_155;
        double s179__block_156;
        double s186__block_163;
        double s180__block_157;
        double s181__block_158;
        double s182__block_159;
        double s183__block_160;
        double s187__block_164;
        double s188__block_165;
        double s190__block_167;
        double s189__block_166;
        double s191__block_168;
        double s192__block_169;
        double s193__block_170;
        double s194__block_171;
        double s215__block_192;
        double s216__block_193;
        double s262_psi_r__block_239;
        double s184__block_161;
        double s185_Delta_l__block_162;
        double s266__block_243;
        int32_t s267__block_244;
        double s268__block_245;
        double s269__block_246;
        double s275__block_252;
        double s276__block_253;
        bool s277__block_254;
        double s278__block_255;
        double s279__block_256;
        bool s280__block_257;
        double s281__block_258;
        double s282_Delta_u__block_259;
        double s246__block_223;
        double s247__block_224;
        double s248__block_225;
        double s199__block_176;
        double s204__block_181;
        double s217__block_194;
        double s218__block_195;
        double s219__block_196;
        double s249__block_226;
        double s250__block_227;
        double s251_v_star__block_228;
        double s196__block_173;
        double s201__block_178;
        double s208__block_185;
        double s209__block_186;
        double s210_x_r__block_187;
        double s263__block_240;
        double s264__block_241;
        double s265__block_242;
        double s252__block_229;
        double s253_psi_r_dot__block_230;
        double s310__block_287;
        double s302__block_279;
        double s303__block_280;
        double s270__block_247;
        double s271__block_248;
        int32_t s272__block_249;
        double s273__block_250;
        double s274__block_251;
        double s304__block_281;
        double s305__block_282;
        double s306__block_283;
        double s307__block_284;
        double s308__block_285;
        double s309_Delta_u_dot__block_286;
        double s311_delta_dot__block_288;
        double s283__block_260;
        double s284__block_261;
        double s285__block_262;
        double s286__block_263;
        double s287__block_264;
        double s288__block_265;
        bool s289__block_266;
        double s290__block_267;
        double s291__block_268;
        double s292__block_269;
        double s293__block_270;
        bool s294__block_271;
        double s295__block_272;
        double s296__block_273;
        double s297__block_274;
        double s298__block_275;
        bool s299__block_276;
        double s300__block_277;
        double s301_delta__block_278;
        double s197__block_174;
        double s202__block_179;
        double s211__block_188;
        double s212__block_189;
        double s213_y_r__block_190;
        double s195__block_172;
        double s200__block_177;
        double s205__block_182;
        double s206__block_183;
        double s207_d_star__block_184;

        // API-function resetStates
        void resetStates() { // created by cpp_define_function

          block_238_mem = 0.0;
          block_235_mem = 0;
        }
        // API-function updateStates
        void updateStates(double Ts) { // created by cpp_define_function
          double s254;
          double s255;
          int32_t s256_cnt_increase;
          int32_t s257;


          // restoring the signals s261, s258_shared_counter, s259, s260, s122, s125, s126, s128, s130, s127, s129, s131, s132, s133, s134, s135, s137, s139, s136, s138, s140, s141, s142, s143, s148, s149, s198, s150, s151, s203, s214, s124, s153, s159, s123, s152, s158, s161, s155, s157, s154, s156, s160, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179, s186, s180, s181, s182, s183, s187, s188, s190, s189, s191, s192, s193, s194, s215, s216, s262_psi_r, s184, s185_Delta_l, s266, s267, s268, s269, s275, s276, s277, s278, s279, s280, s281, s282_Delta_u, s246, s247, s248, s199, s204, s217, s218, s219, s249, s250, s251_v_star, s196, s201, s208, s209, s210_x_r, s263, s264, s265, s252, s253_psi_r_dot, s310, s302, s303, s270, s271, s272, s273, s274, s304, s305, s306, s307, s308, s309_Delta_u_dot, s311_delta_dot, s283, s284, s285, s286, s287, s288, s289, s290, s291, s292, s293, s294, s295, s296, s297, s298, s299, s300, s301_delta, s197, s202, s211, s212, s213_y_r, s195, s200, s205, s206, s207_d_star from the states 
          double &s261 = s261__block_238;
          int32_t &s258_shared_counter = s258_shared_counter__block_235;
          int32_t &s259 = s259__block_236;
          bool &s260 = s260__block_237;
          int32_t &s122 = s122__block_99;
          int32_t &s125 = s125__block_102;
          double &s126 = s126__block_103;
          double &s128 = s128__block_105;
          double &s130 = s130__block_107;
          double &s127 = s127__block_104;
          double &s129 = s129__block_106;
          double &s131 = s131__block_108;
          double &s132 = s132__block_109;
          double &s133 = s133__block_110;
          int32_t &s134 = s134__block_111;
          double &s135 = s135__block_112;
          double &s137 = s137__block_114;
          double &s139 = s139__block_116;
          double &s136 = s136__block_113;
          double &s138 = s138__block_115;
          double &s140 = s140__block_117;
          double &s141 = s141__block_118;
          double &s142 = s142__block_119;
          bool &s143 = s143__block_120;
          int32_t &s148 = s148__block_125;
          int32_t &s149 = s149__block_126;
          double &s198 = s198__block_175;
          int32_t &s150 = s150__block_127;
          int32_t &s151 = s151__block_128;
          double &s203 = s203__block_180;
          double &s214 = s214__block_191;
          double &s124 = s124__block_101;
          double &s153 = s153__block_130;
          double &s159 = s159__block_136;
          double &s123 = s123__block_100;
          double &s152 = s152__block_129;
          double &s158 = s158__block_135;
          double &s161 = s161__block_138;
          double &s155 = s155__block_132;
          double &s157 = s157__block_134;
          double &s154 = s154__block_131;
          double &s156 = s156__block_133;
          double &s160 = s160__block_137;
          double &s162 = s162__block_139;
          double &s163 = s163__block_140;
          double &s164 = s164__block_141;
          double &s165 = s165__block_142;
          double &s166 = s166__block_143;
          bool &s167 = s167__block_144;
          double &s168 = s168__block_145;
          double &s169 = s169__block_146;
          double &s170 = s170__block_147;
          double &s171 = s171__block_148;
          bool &s172 = s172__block_149;
          double &s173 = s173__block_150;
          double &s174 = s174__block_151;
          double &s175 = s175__block_152;
          double &s176 = s176__block_153;
          bool &s177 = s177__block_154;
          double &s178 = s178__block_155;
          double &s179 = s179__block_156;
          double &s186 = s186__block_163;
          double &s180 = s180__block_157;
          double &s181 = s181__block_158;
          double &s182 = s182__block_159;
          double &s183 = s183__block_160;
          double &s187 = s187__block_164;
          double &s188 = s188__block_165;
          double &s190 = s190__block_167;
          double &s189 = s189__block_166;
          double &s191 = s191__block_168;
          double &s192 = s192__block_169;
          double &s193 = s193__block_170;
          double &s194 = s194__block_171;
          double &s215 = s215__block_192;
          double &s216 = s216__block_193;
          double &s262_psi_r = s262_psi_r__block_239;
          double &s184 = s184__block_161;
          double &s185_Delta_l = s185_Delta_l__block_162;
          double &s266 = s266__block_243;
          int32_t &s267 = s267__block_244;
          double &s268 = s268__block_245;
          double &s269 = s269__block_246;
          double &s275 = s275__block_252;
          double &s276 = s276__block_253;
          bool &s277 = s277__block_254;
          double &s278 = s278__block_255;
          double &s279 = s279__block_256;
          bool &s280 = s280__block_257;
          double &s281 = s281__block_258;
          double &s282_Delta_u = s282_Delta_u__block_259;
          double &s246 = s246__block_223;
          double &s247 = s247__block_224;
          double &s248 = s248__block_225;
          double &s199 = s199__block_176;
          double &s204 = s204__block_181;
          double &s217 = s217__block_194;
          double &s218 = s218__block_195;
          double &s219 = s219__block_196;
          double &s249 = s249__block_226;
          double &s250 = s250__block_227;
          double &s251_v_star = s251_v_star__block_228;
          double &s196 = s196__block_173;
          double &s201 = s201__block_178;
          double &s208 = s208__block_185;
          double &s209 = s209__block_186;
          double &s210_x_r = s210_x_r__block_187;
          double &s263 = s263__block_240;
          double &s264 = s264__block_241;
          double &s265 = s265__block_242;
          double &s252 = s252__block_229;
          double &s253_psi_r_dot = s253_psi_r_dot__block_230;
          double &s310 = s310__block_287;
          double &s302 = s302__block_279;
          double &s303 = s303__block_280;
          double &s270 = s270__block_247;
          double &s271 = s271__block_248;
          int32_t &s272 = s272__block_249;
          double &s273 = s273__block_250;
          double &s274 = s274__block_251;
          double &s304 = s304__block_281;
          double &s305 = s305__block_282;
          double &s306 = s306__block_283;
          double &s307 = s307__block_284;
          double &s308 = s308__block_285;
          double &s309_Delta_u_dot = s309_Delta_u_dot__block_286;
          double &s311_delta_dot = s311_delta_dot__block_288;
          double &s283 = s283__block_260;
          double &s284 = s284__block_261;
          double &s285 = s285__block_262;
          double &s286 = s286__block_263;
          double &s287 = s287__block_264;
          double &s288 = s288__block_265;
          bool &s289 = s289__block_266;
          double &s290 = s290__block_267;
          double &s291 = s291__block_268;
          double &s292 = s292__block_269;
          double &s293 = s293__block_270;
          bool &s294 = s294__block_271;
          double &s295 = s295__block_272;
          double &s296 = s296__block_273;
          double &s297 = s297__block_274;
          double &s298 = s298__block_275;
          bool &s299 = s299__block_276;
          double &s300 = s300__block_277;
          double &s301_delta = s301_delta__block_278;
          double &s197 = s197__block_174;
          double &s202 = s202__block_179;
          double &s211 = s211__block_188;
          double &s212 = s212__block_189;
          double &s213_y_r = s213_y_r__block_190;
          double &s195 = s195__block_172;
          double &s200 = s200__block_177;
          double &s205 = s205__block_182;
          double &s206 = s206__block_183;
          double &s207_d_star = s207_d_star__block_184;


          // calculating the block outputs in the following order s254, s255, s256_cnt_increase, s257
          // that depend on Ts
          // dependencies that require a state update are  

          s254 = Ts * s253_psi_r_dot;
          s255 = s262_psi_r + s254;
          s256_cnt_increase = 1;
          s257 = s258_shared_counter + s256_cnt_increase;

          block_238_mem = s255;
          block_235_mem = s257;

          // calculating the block outputs in the following order 
          // that depend on 
          // dependencies that require a state update are  


        }
        // API-function calcResults_1 to compute: s309_Delta_u_dot, s311_delta_dot, s210_x_r, s213_y_r, s251_v_star, s207_d_star, s262_psi_r, s253_psi_r_dot, s185_Delta_l, s282_Delta_u, s301_delta
        void calcResults_1(double &s309_Delta_u_dot, double &s311_delta_dot, double &s210_x_r, double &s213_y_r, double &s251_v_star, double &s207_d_star, double &s262_psi_r, double &s253_psi_r_dot, double &s185_Delta_l, double &s282_Delta_u, double &s301_delta, int32_t s117_tracked_index_tracked_index, double s371_x, CircularBufferPtr s21, double s372_y, CircularBufferPtr s22, CircularBufferPtr s23, double velocity_, double Delta_l_r_dot, double Delta_l_r, CircularBufferPtr s24, double s25, double Delta_l_r_dotdot, double s26, double s373_psi, CircularBufferPtr s20) { // created by cpp_define_function
          double s261;
          int32_t s258_shared_counter;
          int32_t s259;
          bool s260;
          int32_t s122;
          int32_t s125;
          double s126;
          double s128;
          double s130;
          double s127;
          double s129;
          double s131;
          double s132;
          double s133;
          int32_t s134;
          double s135;
          double s137;
          double s139;
          double s136;
          double s138;
          double s140;
          double s141;
          double s142;
          bool s143;
          int32_t s148;
          int32_t s149;
          double s198;
          int32_t s150;
          int32_t s151;
          double s203;
          double s214;
          double s124;
          double s153;
          double s159;
          double s123;
          double s152;
          double s158;
          double s161;
          double s155;
          double s157;
          double s154;
          double s156;
          double s160;
          double s162;
          double s163;
          double s164;
          double s165;
          double s166;
          bool s167;
          double s168;
          double s169;
          double s170;
          double s171;
          bool s172;
          double s173;
          double s174;
          double s175;
          double s176;
          bool s177;
          double s178;
          double s179;
          double s186;
          double s180;
          double s181;
          double s182;
          double s183;
          double s187;
          double s188;
          double s190;
          double s189;
          double s191;
          double s192;
          double s193;
          double s194;
          double s215;
          double s216;
          double s184;
          double s266;
          int32_t s267;
          double s268;
          double s269;
          double s275;
          double s276;
          bool s277;
          double s278;
          double s279;
          bool s280;
          double s281;
          double s246;
          double s247;
          double s248;
          double s199;
          double s204;
          double s217;
          double s218;
          double s219;
          double s249;
          double s250;
          double s196;
          double s201;
          double s208;
          double s209;
          double s263;
          double s264;
          double s265;
          double s252;
          double s310;
          double s302;
          double s303;
          double s270;
          double s271;
          int32_t s272;
          double s273;
          double s274;
          double s304;
          double s305;
          double s306;
          double s307;
          double s308;
          double s283;
          double s284;
          double s285;
          double s286;
          double s287;
          double s288;
          bool s289;
          double s290;
          double s291;
          double s292;
          double s293;
          bool s294;
          double s295;
          double s296;
          double s297;
          double s298;
          bool s299;
          double s300;
          double s197;
          double s202;
          double s211;
          double s212;
          double s195;
          double s200;
          double s205;
          double s206;


          // calculating the block outputs in the following order s261, s258_shared_counter, s259, s260, s122, s125, s126, s128, s130, s127, s129, s131, s132, s133, s134, s135, s137, s139, s136, s138, s140, s141, s142, s143, s148, s149, s198, s150, s151, s203, s214, s124, s153, s159, s123, s152, s158, s161, s155, s157, s154, s156, s160, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179, s186, s180, s181, s182, s183, s187, s188, s190, s189, s191, s192, s193, s194, s215, s216, s262_psi_r, s184, s185_Delta_l, s266, s267, s268, s269, s275, s276, s277, s278, s279, s280, s281, s282_Delta_u, s246, s247, s248, s199, s204, s217, s218, s219, s249, s250, s251_v_star, s196, s201, s208, s209, s210_x_r, s263, s264, s265, s252, s253_psi_r_dot, s310, s302, s303, s270, s271, s272, s273, s274, s304, s305, s306, s307, s308, s309_Delta_u_dot, s311_delta_dot, s283, s284, s285, s286, s287, s288, s289, s290, s291, s292, s293, s294, s295, s296, s297, s298, s299, s300, s301_delta, s197, s202, s211, s212, s213_y_r, s195, s200, s205, s206, s207_d_star
          // that depend on s117_tracked_index_tracked_index, s371_x, s21, s372_y, s22, s23, velocity_, Delta_l_r_dot, Delta_l_r, s24, s25, Delta_l_r_dotdot, s26, s373_psi, s20
          // dependencies that require a state update are s255, s257 

          s261 = block_238_mem;
          s258_shared_counter = block_235_mem;
          s259 = 0;
          s260 = s258_shared_counter == s259;
          s122 = 1;
          s125 = s117_tracked_index_tracked_index + s122;
          { // calling the custom c++ function s21->read_from_absolute_index
            double block_103_out0;
            s21->read_from_absolute_index(block_103_out0, s125);
            s126 = block_103_out0;
          }
          s128 = s371_x - s126;
          s130 = s128 * s128;
          { // calling the custom c++ function s22->read_from_absolute_index
            double block_104_out0;
            s22->read_from_absolute_index(block_104_out0, s125);
            s127 = block_104_out0;
          }
          s129 = s372_y - s127;
          s131 = s129 * s129;
          s132 = s130 + s131;
          s133 = sqrt(s132);
          s134 = s117_tracked_index_tracked_index - s122;
          { // calling the custom c++ function s21->read_from_absolute_index
            double block_112_out0;
            s21->read_from_absolute_index(block_112_out0, s134);
            s135 = block_112_out0;
          }
          s137 = s371_x - s135;
          s139 = s137 * s137;
          { // calling the custom c++ function s22->read_from_absolute_index
            double block_113_out0;
            s22->read_from_absolute_index(block_113_out0, s134);
            s136 = block_113_out0;
          }
          s138 = s372_y - s136;
          s140 = s138 * s138;
          s141 = s139 + s140;
          s142 = sqrt(s141);
          s143 = s133 > s142;
          s148 = s117_tracked_index_tracked_index - s122;
          if (s143) {
            s149 = s148;
          } else {
            s149 = s117_tracked_index_tracked_index;
          }
          { // calling the custom c++ function s23->read_from_absolute_index
            double block_175_out0;
            s23->read_from_absolute_index(block_175_out0, s149);
            s198 = block_175_out0;
          }
          s150 = s117_tracked_index_tracked_index + s122;
          if (s143) {
            s151 = s117_tracked_index_tracked_index;
          } else {
            s151 = s150;
          }
          { // calling the custom c++ function s23->read_from_absolute_index
            double block_180_out0;
            s23->read_from_absolute_index(block_180_out0, s151);
            s203 = block_180_out0;
          }
          s214 = s203 - s198;
          { // calling the custom c++ function s22->read_from_absolute_index
            double block_101_out0;
            s22->read_from_absolute_index(block_101_out0, s117_tracked_index_tracked_index);
            s124 = block_101_out0;
          }
          if (s143) {
            s153 = s136;
          } else {
            s153 = s124;
          }
          s159 = s372_y - s153;
          { // calling the custom c++ function s21->read_from_absolute_index
            double block_100_out0;
            s21->read_from_absolute_index(block_100_out0, s117_tracked_index_tracked_index);
            s123 = block_100_out0;
          }
          if (s143) {
            s152 = s135;
          } else {
            s152 = s123;
          }
          s158 = s371_x - s152;
          s161 = atan2(s159, s158);
          if (s143) {
            s155 = s124;
          } else {
            s155 = s127;
          }
          s157 = s155 - s153;
          if (s143) {
            s154 = s123;
          } else {
            s154 = s126;
          }
          s156 = s154 - s152;
          s160 = atan2(s157, s156);
          s162 = s161 - s160;
          s163 = 6.283185307179586;
          s164 = fmod(s162, s163);
          s165 = 0;
          s166 = 0;
          s167 = s164 < s166;
          if (s167) {
            s168 = 6.283185307179586;
          } else {
            s168 = s165;
          }
          s169 = s164 + s168;
          s170 = 0;
          s171 = -3.141592653589793;
          s172 = s169 <= s171;
          if (s172) {
            s173 = 6.283185307179586;
          } else {
            s173 = s170;
          }
          s174 = s169 + s173;
          s175 = 0;
          s176 = 3.141592653589793;
          s177 = s169 > s176;
          if (s177) {
            s178 = -6.283185307179586;
          } else {
            s178 = s175;
          }
          s179 = s174 + s178;
          s186 = cos(s179);
          s180 = s158 * s158;
          s181 = s159 * s159;
          s182 = s180 + s181;
          s183 = sqrt(s182);
          s187 = s186 * s183;
          s188 = s152 - s154;
          s190 = s188 * s188;
          s189 = s153 - s155;
          s191 = s189 * s189;
          s192 = s190 + s191;
          s193 = sqrt(s192);
          s194 = s187 / s193;
          s215 = s214 * s194;
          s216 = s198 + s215;
          if (s260) {
            s262_psi_r = s216;
          } else {
            s262_psi_r = s261;
          }
          s184 = sin(s179);
          s185_Delta_l = s184 * s183;
          s266 = Delta_l_r - s185_Delta_l;
          s267 = 1;
          s268 = s266 * s267;
          s269 = Delta_l_r_dot + s268;
          s275 = s269 / velocity_;
          s276 = -0.99;
          s277 = s275 < s276;
          if (s277) {
            s278 = -0.99;
          } else {
            s278 = s275;
          }
          s279 = 0.99;
          s280 = s278 > s279;
          if (s280) {
            s281 = 0.99;
          } else {
            s281 = s278;
          }
          s282_Delta_u = asin(s281);
          s246 = cos(s282_Delta_u);
          s247 = velocity_ * s246;
          s248 = 1;
          { // calling the custom c++ function s24->read_from_absolute_index
            double block_176_out0;
            s24->read_from_absolute_index(block_176_out0, s149);
            s199 = block_176_out0;
          }
          { // calling the custom c++ function s24->read_from_absolute_index
            double block_181_out0;
            s24->read_from_absolute_index(block_181_out0, s151);
            s204 = block_181_out0;
          }
          s217 = s204 - s199;
          s218 = s217 * s194;
          s219 = s199 + s218;
          s249 = s185_Delta_l * s219;
          s250 = s248 - s249;
          s251_v_star = s247 / s250;
          { // calling the custom c++ function s21->read_from_absolute_index
            double block_173_out0;
            s21->read_from_absolute_index(block_173_out0, s149);
            s196 = block_173_out0;
          }
          { // calling the custom c++ function s21->read_from_absolute_index
            double block_178_out0;
            s21->read_from_absolute_index(block_178_out0, s151);
            s201 = block_178_out0;
          }
          s208 = s201 - s196;
          s209 = s208 * s194;
          s210_x_r = s196 + s209;
          s263 = s216 - s262_psi_r;
          s264 = 1.0;
          s265 = s263 * s264;
          s252 = s219 + s265;
          s253_psi_r_dot = s251_v_star * s252;
          s310 = s253_psi_r_dot - s25;
          s302 = s269 / velocity_;
          s303 = cos(s302);
          s270 = 0.0;
          s271 = Delta_l_r_dot - s270;
          s272 = 1;
          s273 = s271 * s272;
          s274 = Delta_l_r_dotdot + s273;
          s304 = velocity_ * s274;
          s305 = s26 * s269;
          s306 = s304 - s305;
          s307 = s303 * s306;
          s308 = velocity_ * velocity_;
          s309_Delta_u_dot = s307 / s308;
          s311_delta_dot = s310 + s309_Delta_u_dot;
          s283 = s262_psi_r - s373_psi;
          s284 = s283 + s282_Delta_u;
          s285 = 6.283185307179586;
          s286 = fmod(s284, s285);
          s287 = 0;
          s288 = 0;
          s289 = s286 < s288;
          if (s289) {
            s290 = 6.283185307179586;
          } else {
            s290 = s287;
          }
          s291 = s286 + s290;
          s292 = 0;
          s293 = -3.141592653589793;
          s294 = s291 <= s293;
          if (s294) {
            s295 = 6.283185307179586;
          } else {
            s295 = s292;
          }
          s296 = s291 + s295;
          s297 = 0;
          s298 = 3.141592653589793;
          s299 = s291 > s298;
          if (s299) {
            s300 = -6.283185307179586;
          } else {
            s300 = s297;
          }
          s301_delta = s296 + s300;
          { // calling the custom c++ function s22->read_from_absolute_index
            double block_174_out0;
            s22->read_from_absolute_index(block_174_out0, s149);
            s197 = block_174_out0;
          }
          { // calling the custom c++ function s22->read_from_absolute_index
            double block_179_out0;
            s22->read_from_absolute_index(block_179_out0, s151);
            s202 = block_179_out0;
          }
          s211 = s202 - s197;
          s212 = s211 * s194;
          s213_y_r = s197 + s212;
          { // calling the custom c++ function s20->read_from_absolute_index
            double block_172_out0;
            s20->read_from_absolute_index(block_172_out0, s149);
            s195 = block_172_out0;
          }
          { // calling the custom c++ function s20->read_from_absolute_index
            double block_177_out0;
            s20->read_from_absolute_index(block_177_out0, s151);
            s200 = block_177_out0;
          }
          s205 = s200 - s195;
          s206 = s205 * s194;
          s207_d_star = s195 + s206;

          // saving the signals s261, s258_shared_counter, s259, s260, s122, s125, s126, s128, s130, s127, s129, s131, s132, s133, s134, s135, s137, s139, s136, s138, s140, s141, s142, s143, s148, s149, s198, s150, s151, s203, s214, s124, s153, s159, s123, s152, s158, s161, s155, s157, s154, s156, s160, s162, s163, s164, s165, s166, s167, s168, s169, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179, s186, s180, s181, s182, s183, s187, s188, s190, s189, s191, s192, s193, s194, s215, s216, s262_psi_r, s184, s185_Delta_l, s266, s267, s268, s269, s275, s276, s277, s278, s279, s280, s281, s282_Delta_u, s246, s247, s248, s199, s204, s217, s218, s219, s249, s250, s251_v_star, s196, s201, s208, s209, s210_x_r, s263, s264, s265, s252, s253_psi_r_dot, s310, s302, s303, s270, s271, s272, s273, s274, s304, s305, s306, s307, s308, s309_Delta_u_dot, s311_delta_dot, s283, s284, s285, s286, s287, s288, s289, s290, s291, s292, s293, s294, s295, s296, s297, s298, s299, s300, s301_delta, s197, s202, s211, s212, s213_y_r, s195, s200, s205, s206, s207_d_star into the states 
          s261__block_238 = s261;
          s258_shared_counter__block_235 = s258_shared_counter;
          s259__block_236 = s259;
          s260__block_237 = s260;
          s122__block_99 = s122;
          s125__block_102 = s125;
          s126__block_103 = s126;
          s128__block_105 = s128;
          s130__block_107 = s130;
          s127__block_104 = s127;
          s129__block_106 = s129;
          s131__block_108 = s131;
          s132__block_109 = s132;
          s133__block_110 = s133;
          s134__block_111 = s134;
          s135__block_112 = s135;
          s137__block_114 = s137;
          s139__block_116 = s139;
          s136__block_113 = s136;
          s138__block_115 = s138;
          s140__block_117 = s140;
          s141__block_118 = s141;
          s142__block_119 = s142;
          s143__block_120 = s143;
          s148__block_125 = s148;
          s149__block_126 = s149;
          s198__block_175 = s198;
          s150__block_127 = s150;
          s151__block_128 = s151;
          s203__block_180 = s203;
          s214__block_191 = s214;
          s124__block_101 = s124;
          s153__block_130 = s153;
          s159__block_136 = s159;
          s123__block_100 = s123;
          s152__block_129 = s152;
          s158__block_135 = s158;
          s161__block_138 = s161;
          s155__block_132 = s155;
          s157__block_134 = s157;
          s154__block_131 = s154;
          s156__block_133 = s156;
          s160__block_137 = s160;
          s162__block_139 = s162;
          s163__block_140 = s163;
          s164__block_141 = s164;
          s165__block_142 = s165;
          s166__block_143 = s166;
          s167__block_144 = s167;
          s168__block_145 = s168;
          s169__block_146 = s169;
          s170__block_147 = s170;
          s171__block_148 = s171;
          s172__block_149 = s172;
          s173__block_150 = s173;
          s174__block_151 = s174;
          s175__block_152 = s175;
          s176__block_153 = s176;
          s177__block_154 = s177;
          s178__block_155 = s178;
          s179__block_156 = s179;
          s186__block_163 = s186;
          s180__block_157 = s180;
          s181__block_158 = s181;
          s182__block_159 = s182;
          s183__block_160 = s183;
          s187__block_164 = s187;
          s188__block_165 = s188;
          s190__block_167 = s190;
          s189__block_166 = s189;
          s191__block_168 = s191;
          s192__block_169 = s192;
          s193__block_170 = s193;
          s194__block_171 = s194;
          s215__block_192 = s215;
          s216__block_193 = s216;
          s262_psi_r__block_239 = s262_psi_r;
          s184__block_161 = s184;
          s185_Delta_l__block_162 = s185_Delta_l;
          s266__block_243 = s266;
          s267__block_244 = s267;
          s268__block_245 = s268;
          s269__block_246 = s269;
          s275__block_252 = s275;
          s276__block_253 = s276;
          s277__block_254 = s277;
          s278__block_255 = s278;
          s279__block_256 = s279;
          s280__block_257 = s280;
          s281__block_258 = s281;
          s282_Delta_u__block_259 = s282_Delta_u;
          s246__block_223 = s246;
          s247__block_224 = s247;
          s248__block_225 = s248;
          s199__block_176 = s199;
          s204__block_181 = s204;
          s217__block_194 = s217;
          s218__block_195 = s218;
          s219__block_196 = s219;
          s249__block_226 = s249;
          s250__block_227 = s250;
          s251_v_star__block_228 = s251_v_star;
          s196__block_173 = s196;
          s201__block_178 = s201;
          s208__block_185 = s208;
          s209__block_186 = s209;
          s210_x_r__block_187 = s210_x_r;
          s263__block_240 = s263;
          s264__block_241 = s264;
          s265__block_242 = s265;
          s252__block_229 = s252;
          s253_psi_r_dot__block_230 = s253_psi_r_dot;
          s310__block_287 = s310;
          s302__block_279 = s302;
          s303__block_280 = s303;
          s270__block_247 = s270;
          s271__block_248 = s271;
          s272__block_249 = s272;
          s273__block_250 = s273;
          s274__block_251 = s274;
          s304__block_281 = s304;
          s305__block_282 = s305;
          s306__block_283 = s306;
          s307__block_284 = s307;
          s308__block_285 = s308;
          s309_Delta_u_dot__block_286 = s309_Delta_u_dot;
          s311_delta_dot__block_288 = s311_delta_dot;
          s283__block_260 = s283;
          s284__block_261 = s284;
          s285__block_262 = s285;
          s286__block_263 = s286;
          s287__block_264 = s287;
          s288__block_265 = s288;
          s289__block_266 = s289;
          s290__block_267 = s290;
          s291__block_268 = s291;
          s292__block_269 = s292;
          s293__block_270 = s293;
          s294__block_271 = s294;
          s295__block_272 = s295;
          s296__block_273 = s296;
          s297__block_274 = s297;
          s298__block_275 = s298;
          s299__block_276 = s299;
          s300__block_277 = s300;
          s301_delta__block_278 = s301_delta;
          s197__block_174 = s197;
          s202__block_179 = s202;
          s211__block_188 = s211;
          s212__block_189 = s212;
          s213_y_r__block_190 = s213_y_r;
          s195__block_172 = s195;
          s200__block_177 = s200;
          s205__block_182 = s205;
          s206__block_183 = s206;
          s207_d_star__block_184 = s207_d_star;
        }
        // all system inputs and outputs combined
        struct Inputs{
          int32_t s117_tracked_index_tracked_index;
          CircularBufferPtr s21;
          double Ts;
          CircularBufferPtr s24;
          double s371_x;
          double s372_y;
          CircularBufferPtr s20;
          double Delta_l_r_dotdot;
          double s373_psi;
          double Delta_l_r;
          double s26;
          CircularBufferPtr s23;
          double s25;
          CircularBufferPtr s22;
          double velocity_;
          double Delta_l_r_dot;

        };
        struct Outputs{
          double s309_Delta_u_dot;
          double s311_delta_dot;
          double s210_x_r;
          double s213_y_r;
          double s251_v_star;
          double s207_d_star;
          double s262_psi_r;
          double s253_psi_r_dot;
          double s185_Delta_l;
          double s282_Delta_u;
          double s301_delta;

        };
      };

    // end of namespace for Sys1004_controller

    // namespace for Sys1005_simulation_model {
      // global variables

      class Sys1005_simulation_model {
        public:


        // state update
        double block_328_mem;
        int32_t block_313_mem;
        double block_334_mem;
        double block_336_mem;
        double block_316_mem;
        double block_322_mem;


        // state update


        //
        // cached output values
        //

        double s361__block_328;
        int32_t s346_shared_counter__block_313;
        int32_t s359__block_326;
        bool s360__block_327;
        double s362_psi__block_329;
        double s367__block_334;
        int32_t s365__block_332;
        bool s366__block_333;
        double s368_d__block_335;
        double s369_psi_dot__block_336;
        double s349__block_316;
        int32_t s347__block_314;
        bool s348__block_315;
        double s350_x__block_317;
        double s355__block_322;
        int32_t s353__block_320;
        bool s354__block_321;
        double s356_y__block_323;

        // API-function resetStates
        void resetStates() { // created by cpp_define_function

          block_328_mem = 0.0;
          block_313_mem = 0;
          block_334_mem = 0.0;
          block_336_mem = 0.0;
          block_316_mem = 0.0;
          block_322_mem = 0.0;
        }
        // API-function updateStates
        void updateStates(double wheelbase, double Ts, double s322_delta_delta, double velocity_) { // created by cpp_define_function
          double s339;
          double s327;
          bool s328;
          double s329;
          double s330;
          bool s331;
          double s332;
          double s340;
          double s341;
          double s357;
          double s358;
          int32_t s344_cnt_increase;
          int32_t s345;
          double s363;
          double s364;
          double s333;
          double s334;
          double s335;
          double s342;
          double s343;
          double s336;
          double s337;
          double s338;
          double s351;
          double s352;


          // restoring the signals s361, s346_shared_counter, s359, s360, s362_psi, s367, s365, s366, s368_d, s369_psi_dot, s349, s347, s348, s350_x, s355, s353, s354, s356_y from the states 
          double &s361 = s361__block_328;
          int32_t &s346_shared_counter = s346_shared_counter__block_313;
          int32_t &s359 = s359__block_326;
          bool &s360 = s360__block_327;
          double &s362_psi = s362_psi__block_329;
          double &s367 = s367__block_334;
          int32_t &s365 = s365__block_332;
          bool &s366 = s366__block_333;
          double &s368_d = s368_d__block_335;
          double &s369_psi_dot = s369_psi_dot__block_336;
          double &s349 = s349__block_316;
          int32_t &s347 = s347__block_314;
          bool &s348 = s348__block_315;
          double &s350_x = s350_x__block_317;
          double &s355 = s355__block_322;
          int32_t &s353 = s353__block_320;
          bool &s354 = s354__block_321;
          double &s356_y = s356_y__block_323;


          // calculating the block outputs in the following order s339, s327, s328, s329, s330, s331, s332, s340, s341, s357, s358, s344_cnt_increase, s345, s363, s364, s333, s334, s335, s342, s343, s336, s337, s338, s351, s352
          // that depend on Ts, velocity_, wheelbase, s322_delta_delta
          // dependencies that require a state update are  

          s339 = velocity_ / wheelbase;
          s327 = -1.5707963267948966;
          s328 = s322_delta_delta < s327;
          if (s328) {
            s329 = -1.5707963267948966;
          } else {
            s329 = s322_delta_delta;
          }
          s330 = 1.5707963267948966;
          s331 = s329 > s330;
          if (s331) {
            s332 = 1.5707963267948966;
          } else {
            s332 = s329;
          }
          s340 = sin(s332);
          s341 = s339 * s340;
          s357 = Ts * s341;
          s358 = s362_psi + s357;
          s344_cnt_increase = 1;
          s345 = s346_shared_counter + s344_cnt_increase;
          s363 = Ts * velocity_;
          s364 = s368_d + s363;
          s333 = s332 + s362_psi;
          s334 = cos(s333);
          s335 = velocity_ * s334;
          s342 = Ts * s335;
          s343 = s350_x + s342;
          s336 = s332 + s362_psi;
          s337 = sin(s336);
          s338 = velocity_ * s337;
          s351 = Ts * s338;
          s352 = s356_y + s351;

          block_328_mem = s358;
          block_313_mem = s345;
          block_334_mem = s364;
          block_336_mem = s341;
          block_316_mem = s343;
          block_322_mem = s352;

          // calculating the block outputs in the following order 
          // that depend on 
          // dependencies that require a state update are  


        }
        // API-function calcResults_1 to compute: s368_d, s350_x, s356_y, s362_psi, s369_psi_dot
        void calcResults_1(double &s368_d, double &s350_x, double &s356_y, double &s362_psi, double &s369_psi_dot, double psi0, double d0, double x0, double y0) { // created by cpp_define_function
          double s361;
          int32_t s346_shared_counter;
          int32_t s359;
          bool s360;
          double s367;
          int32_t s365;
          bool s366;
          double s349;
          int32_t s347;
          bool s348;
          double s355;
          int32_t s353;
          bool s354;


          // calculating the block outputs in the following order s361, s346_shared_counter, s359, s360, s362_psi, s367, s365, s366, s368_d, s369_psi_dot, s349, s347, s348, s350_x, s355, s353, s354, s356_y
          // that depend on psi0, d0, x0, y0
          // dependencies that require a state update are s358, s345, s364, s341, s343, s352 

          s361 = block_328_mem;
          s346_shared_counter = block_313_mem;
          s359 = 0;
          s360 = s346_shared_counter == s359;
          if (s360) {
            s362_psi = psi0;
          } else {
            s362_psi = s361;
          }
          s367 = block_334_mem;
          s365 = 0;
          s366 = s346_shared_counter == s365;
          if (s366) {
            s368_d = d0;
          } else {
            s368_d = s367;
          }
          s369_psi_dot = block_336_mem;
          s349 = block_316_mem;
          s347 = 0;
          s348 = s346_shared_counter == s347;
          if (s348) {
            s350_x = x0;
          } else {
            s350_x = s349;
          }
          s355 = block_322_mem;
          s353 = 0;
          s354 = s346_shared_counter == s353;
          if (s354) {
            s356_y = y0;
          } else {
            s356_y = s355;
          }

          // saving the signals s361, s346_shared_counter, s359, s360, s362_psi, s367, s365, s366, s368_d, s369_psi_dot, s349, s347, s348, s350_x, s355, s353, s354, s356_y into the states 
          s361__block_328 = s361;
          s346_shared_counter__block_313 = s346_shared_counter;
          s359__block_326 = s359;
          s360__block_327 = s360;
          s362_psi__block_329 = s362_psi;
          s367__block_334 = s367;
          s365__block_332 = s365;
          s366__block_333 = s366;
          s368_d__block_335 = s368_d;
          s369_psi_dot__block_336 = s369_psi_dot;
          s349__block_316 = s349;
          s347__block_314 = s347;
          s348__block_315 = s348;
          s350_x__block_317 = s350_x;
          s355__block_322 = s355;
          s353__block_320 = s353;
          s354__block_321 = s354;
          s356_y__block_323 = s356_y;
        }
        // all system inputs and outputs combined
        struct Inputs{
          double s322_delta_delta;
          double Ts;
          double psi0;
          double wheelbase;
          double y0;
          double d0;
          double velocity_;
          double x0;

        };
        struct Outputs{
          double s368_d;
          double s350_x;
          double s356_y;
          double s362_psi;
          double s369_psi_dot;

        };
      };

    // end of namespace for Sys1005_simulation_model

    class Sys1001_process_data {
      public:


      // state update
      // instance of Sys1005_simulation_model
      Sys1005_simulation_model block_337_subsystem_Sys1005_simulation_model;
      // instance of Sys1002_tracker
      Sys1002_tracker block_98_subsystem_Sys1002_tracker;
      // instance of Sys1004_controller
      Sys1004_controller block_289_subsystem_Sys1004_controller;
      double block_12_mem;


      // state update


      //
      // cached output values
      //

      double s370_d__block_337;
      double s371_x__block_337;
      double s372_y__block_337;
      int32_t s117_tracked_index_tracked_index__block_98;
      double s373_psi__block_337;
      double s26__block_13;
      double s25__block_12;
      double s322_delta_delta__block_289;
      double s313_delta_dot__block_289;
      int32_t s323__block_290;
      int32_t s324_read_position_read_position__block_291;
      bool s120_output_valid_output_valid_output_valid__block_98;
      int32_t s325__block_292;
      int32_t s326_minimal_read_position_minimal_read_position__block_293;
      double s374_psi_dot__block_337;
      bool s121_need_more_path_input_data_need_more_path_input_data__block_98;
      double s317_d_star__block_289;
      double s375_psi_r__block_338;
      double s376__block_339;
      double s377_K__block_340;

      // API-function resetStates
      void resetStates() { // created by cpp_define_function

        // reset state of subsystem embedded by 337
        block_337_subsystem_Sys1005_simulation_model.resetStates();
        // reset state of subsystem embedded by 98
        block_98_subsystem_Sys1002_tracker.resetStates();
        // reset state of subsystem embedded by 289
        block_289_subsystem_Sys1004_controller.resetStates();
        block_12_mem = 0.0;
      }
      // API-function updateStates
      void updateStates(CircularBufferPtr s21, double Ts, CircularBufferPtr s20, double wheelbase, CircularBufferPtr s22, double velocity_) { // created by cpp_define_function
        int32_t s27;
        int32_t s28;
        int32_t s29;
        int32_t s31;
        bool s32;


        // restoring the signals s370_d, s371_x, s372_y, s117_tracked_index_tracked_index, s373_psi, s26, s25, s322_delta_delta, s313_delta_dot, s323, s324_read_position_read_position, s120_output_valid_output_valid_output_valid, s325, s326_minimal_read_position_minimal_read_position, s374_psi_dot, s121_need_more_path_input_data_need_more_path_input_data, s317_d_star, s375_psi_r, s376, s377_K from the states 
        double &s370_d = s370_d__block_337;
        double &s371_x = s371_x__block_337;
        double &s372_y = s372_y__block_337;
        int32_t &s117_tracked_index_tracked_index = s117_tracked_index_tracked_index__block_98;
        double &s373_psi = s373_psi__block_337;
        double &s26 = s26__block_13;
        double &s25 = s25__block_12;
        double &s322_delta_delta = s322_delta_delta__block_289;
        double &s313_delta_dot = s313_delta_dot__block_289;
        int32_t &s323 = s323__block_290;
        int32_t &s324_read_position_read_position = s324_read_position_read_position__block_291;
        bool &s120_output_valid_output_valid_output_valid = s120_output_valid_output_valid_output_valid__block_98;
        int32_t &s325 = s325__block_292;
        int32_t &s326_minimal_read_position_minimal_read_position = s326_minimal_read_position_minimal_read_position__block_293;
        double &s374_psi_dot = s374_psi_dot__block_337;
        bool &s121_need_more_path_input_data_need_more_path_input_data = s121_need_more_path_input_data_need_more_path_input_data__block_98;
        double &s317_d_star = s317_d_star__block_289;
        double &s375_psi_r = s375_psi_r__block_338;
        double &s376 = s376__block_339;
        double &s377_K = s377_K__block_340;


        // calculating the block outputs in the following order s27, s28, s29, s31, s32
        // that depend on Ts, wheelbase, velocity_, s21, s20, s22
        // dependencies that require a state update are  

        { // calling the custom c++ function s20->get_current_absolute_write_index
          int32_t block_14_out0;
          s20->get_current_absolute_write_index(block_14_out0);
          s27 = block_14_out0;
        }
        s28 = 1;
        s29 = s27 - s28;
        s31 = 5;
        s32 = s29 > s31;

        if (s120_output_valid_output_valid_output_valid == 1) {
          { // subsystem Sys1005_simulation_model
            block_337_subsystem_Sys1005_simulation_model.updateStates(wheelbase, Ts, s322_delta_delta, velocity_);
          }

        }
        if (s32 == 1) {
          { // subsystem Sys1002_tracker
            block_98_subsystem_Sys1002_tracker.updateStates(s21, s371_x, s372_y, s20, s22);
          }

        }
        if (s120_output_valid_output_valid_output_valid == 1) {
          { // subsystem Sys1004_controller
            block_289_subsystem_Sys1004_controller.updateStates(Ts);
          }

        }
        block_12_mem = s374_psi_dot;

        // calculating the block outputs in the following order 
        // that depend on 
        // dependencies that require a state update are  


      }
      // API-function calcResults_1 to compute: s370_d, s371_x, s372_y, s373_psi, s374_psi_dot, s375_psi_r, s377_K, s322_delta_delta, s313_delta_dot, s317_d_star, s117_tracked_index_tracked_index, s120_output_valid_output_valid_output_valid, s121_need_more_path_input_data_need_more_path_input_data, s324_read_position_read_position, s326_minimal_read_position_minimal_read_position
      void calcResults_1(double &s370_d, double &s371_x, double &s372_y, double &s373_psi, double &s374_psi_dot, double &s375_psi_r, double &s377_K, double &s322_delta_delta, double &s313_delta_dot, double &s317_d_star, int32_t &s117_tracked_index_tracked_index, bool &s120_output_valid_output_valid_output_valid, bool &s121_need_more_path_input_data_need_more_path_input_data, int32_t &s324_read_position_read_position, int32_t &s326_minimal_read_position_minimal_read_position, double psi0, double x0, double y0, double d0, CircularBufferPtr s21, CircularBufferPtr s20, CircularBufferPtr s22, CircularBufferPtr s24, double Delta_l_r_dotdot, double Delta_l_r, CircularBufferPtr s23, double velocity_, double Delta_l_r_dot) { // created by cpp_define_function
        double s26;
        double s25;
        int32_t s323;
        int32_t s325;
        double s376;


        // calculating the block outputs in the following order s370_d, s371_x, s372_y, s117_tracked_index_tracked_index, s373_psi, s26, s25, s322_delta_delta, s313_delta_dot, s323, s324_read_position_read_position, s120_output_valid_output_valid_output_valid, s325, s326_minimal_read_position_minimal_read_position, s374_psi_dot, s121_need_more_path_input_data_need_more_path_input_data, s317_d_star, s375_psi_r, s376, s377_K
        // that depend on psi0, x0, y0, d0, s21, s20, s22, s24, Delta_l_r_dotdot, Delta_l_r, s23, velocity_, Delta_l_r_dot
        // dependencies that require a state update are s322_delta_delta, Ts, s120_output_valid_output_valid_output_valid, wheelbase, velocity_, s21, s371_x, s372_y, s20, s32, s22, s374_psi_dot 

        { // subsystem Sys1005_simulation_model
          double _s368_d;
          double _s350_x;
          double _s356_y;
          double _s362_psi;
          double _s369_psi_dot;
          block_337_subsystem_Sys1005_simulation_model.calcResults_1(_s368_d, _s350_x, _s356_y, _s362_psi, _s369_psi_dot, psi0, d0, x0, y0);
          s370_d = _s368_d;
          s371_x = _s350_x;
          s372_y = _s356_y;
          s373_psi = _s362_psi;
          s374_psi_dot = _s369_psi_dot;
        }
        { // subsystem Sys1002_tracker
          int32_t _s113_optimal_index_tracked_index;
          int32_t _s96_Delta_index_Delta_index;
          double _s116_J_star_distance;
          bool _s98_reached_minimum_minimal_distance_reached;
          bool _s99_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data;
          block_98_subsystem_Sys1002_tracker.calcResults_1(_s113_optimal_index_tracked_index, _s96_Delta_index_Delta_index, _s116_J_star_distance, _s98_reached_minimum_minimal_distance_reached, _s99_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data, s21, s371_x, s22, s372_y, s20);
          s117_tracked_index_tracked_index = _s113_optimal_index_tracked_index;
          s120_output_valid_output_valid_output_valid = _s98_reached_minimum_minimal_distance_reached;
          s121_need_more_path_input_data_need_more_path_input_data = _s99_reached_the_end_of_currently_available_path_data_reached_the_end_of_currently_available_path_data;
        }
        s26 = 0;
        s25 = block_12_mem;
        { // subsystem Sys1004_controller
          double _s309_Delta_u_dot;
          double _s311_delta_dot;
          double _s210_x_r;
          double _s213_y_r;
          double _s251_v_star;
          double _s207_d_star;
          double _s262_psi_r;
          double _s253_psi_r_dot;
          double _s185_Delta_l;
          double _s282_Delta_u;
          double _s301_delta;
          block_289_subsystem_Sys1004_controller.calcResults_1(_s309_Delta_u_dot, _s311_delta_dot, _s210_x_r, _s213_y_r, _s251_v_star, _s207_d_star, _s262_psi_r, _s253_psi_r_dot, _s185_Delta_l, _s282_Delta_u, _s301_delta, s117_tracked_index_tracked_index, s371_x, s21, s372_y, s22, s23, velocity_, Delta_l_r_dot, Delta_l_r, s24, s25, Delta_l_r_dotdot, s26, s373_psi, s20);
          s322_delta_delta = _s301_delta;
          s313_delta_dot = _s311_delta_dot;
          s317_d_star = _s207_d_star;
        }
        s323 = 1;
        s324_read_position_read_position = s117_tracked_index_tracked_index + s323;
        s325 = 100;
        s326_minimal_read_position_minimal_read_position = s324_read_position_read_position - s325;
        s375_psi_r = s373_psi + s322_delta_delta;
        s376 = s374_psi_dot + s313_delta_dot;
        s377_K = s376 / velocity_;

        // saving the signals s370_d, s371_x, s372_y, s117_tracked_index_tracked_index, s373_psi, s26, s25, s322_delta_delta, s313_delta_dot, s323, s324_read_position_read_position, s120_output_valid_output_valid_output_valid, s325, s326_minimal_read_position_minimal_read_position, s374_psi_dot, s121_need_more_path_input_data_need_more_path_input_data, s317_d_star, s375_psi_r, s376, s377_K into the states 
        s370_d__block_337 = s370_d;
        s371_x__block_337 = s371_x;
        s372_y__block_337 = s372_y;
        s117_tracked_index_tracked_index__block_98 = s117_tracked_index_tracked_index;
        s373_psi__block_337 = s373_psi;
        s26__block_13 = s26;
        s25__block_12 = s25;
        s322_delta_delta__block_289 = s322_delta_delta;
        s313_delta_dot__block_289 = s313_delta_dot;
        s323__block_290 = s323;
        s324_read_position_read_position__block_291 = s324_read_position_read_position;
        s120_output_valid_output_valid_output_valid__block_98 = s120_output_valid_output_valid_output_valid;
        s325__block_292 = s325;
        s326_minimal_read_position_minimal_read_position__block_293 = s326_minimal_read_position_minimal_read_position;
        s374_psi_dot__block_337 = s374_psi_dot;
        s121_need_more_path_input_data_need_more_path_input_data__block_98 = s121_need_more_path_input_data_need_more_path_input_data;
        s317_d_star__block_289 = s317_d_star;
        s375_psi_r__block_338 = s375_psi_r;
        s376__block_339 = s376;
        s377_K__block_340 = s377_K;
      }
      // all system inputs and outputs combined
      struct Inputs{
        CircularBufferPtr s21;
        double Ts;
        CircularBufferPtr s24;
        CircularBufferPtr s20;
        double Delta_l_r_dotdot;
        double Delta_l_r;
        double psi0;
        double wheelbase;
        double y0;
        CircularBufferPtr s23;
        double d0;
        CircularBufferPtr s22;
        double velocity_;
        double Delta_l_r_dot;
        double x0;

      };
      struct Outputs{
        double s370_d;
        double s371_x;
        double s372_y;
        double s373_psi;
        double s374_psi_dot;
        double s375_psi_r;
        double s377_K;
        double s322_delta_delta;
        double s313_delta_dot;
        double s317_d_star;
        int32_t s117_tracked_index_tracked_index;
        bool s120_output_valid_output_valid_output_valid;
        bool s121_need_more_path_input_data_need_more_path_input_data;
        int32_t s324_read_position_read_position;
        int32_t s326_minimal_read_position_minimal_read_position;

      };
    };

  // end of namespace for Sys1001_process_data

  class simulation {
    public:


    // state update
    // instance of Sys1000_store_input_data
    Sys1000_store_input_data block_11_subsystem_Sys1000_store_input_data;
    // instance of Sys1001_process_data
    Sys1001_process_data block_341_subsystem_Sys1001_process_data;
    CircularBuffer block_2_instance = CircularBuffer(10000);
    CircularBufferPtr block_2_ptr = &block_2_instance;
    CircularBuffer block_5_instance = CircularBuffer(10000);
    CircularBufferPtr block_5_ptr = &block_5_instance;
    CircularBuffer block_1_instance = CircularBuffer(10000);
    CircularBufferPtr block_1_ptr = &block_1_instance;
    CircularBuffer block_4_instance = CircularBuffer(10000);
    CircularBufferPtr block_4_ptr = &block_4_instance;
    CircularBuffer block_3_instance = CircularBuffer(10000);
    CircularBufferPtr block_3_ptr = &block_3_instance;
    double block_343_mem;
    int32_t block_345_mem;


    // state update


    //
    // cached output values
    //

    CircularBufferPtr s21__block_2;
    CircularBufferPtr s24__block_5;
    CircularBufferPtr s20__block_1;
    CircularBufferPtr s23__block_4;
    CircularBufferPtr s22__block_3;
    double path_psi__block_341;
    int32_t tracked_index__block_341;
    double s394__block_343;
    bool output_valid__block_341;
    int32_t s393__block_342;
    double s387__block_341;
    double path_d_star__block_344;
    double path_K__block_341;
    double vehicle_delta__block_341;
    double vehicle_psi_dot__block_341;
    double vehicle_delta_dot__block_341;
    int32_t s406__block_355;
    int32_t s398__block_347;
    int32_t s399__block_348;
    int32_t head_index__block_349;
    int32_t s396__block_345;
    int32_t s392__block_341;
    int32_t s397_minimal_read_position__block_346;
    int32_t s403__block_352;
    int32_t s404__block_353;
    int32_t s405__block_354;
    int32_t elements_free_to_write__block_356;
    double s408__block_357;
    double velocity__block_358;
    bool need_more_path_input_data__block_341;
    double distance_at_the_end_of_horizon__block_350;
    int32_t read_position__block_341;
    double path_y__block_341;
    double path_x__block_341;
    double vehicle_psi__block_341;
    double path_d__block_341;
    double distance_ahead__block_351;

    // API-function resetStates
    void resetStates() { // created by cpp_define_function

      // reset state of subsystem embedded by 11
      block_11_subsystem_Sys1000_store_input_data.resetStates();
      // reset state of subsystem embedded by 341
      block_341_subsystem_Sys1001_process_data.resetStates();
      block_2_ptr->reset();
      block_5_ptr->reset();
      block_1_ptr->reset();
      block_4_ptr->reset();
      block_3_ptr->reset();
      block_343_mem = 0;
      block_345_mem = 0;
    }
    // output signals of  resetStates
    struct Outputs_resetStates{
      ;

    };
    // input signals of resetStates
    struct Inputs_resetStates{
      ;

    };
    // wrapper function for resetStates
    Outputs_resetStates resetStates__(Inputs_resetStates inputs) {
      Outputs_resetStates outputs;

      resetStates();

      return outputs;
    }
    // API-function updateStates
    void updateStates(double Ts, double psi_sample, double x_sample, bool input_sample_valid, double wheelbase, double K_sample, double y_sample, double d_sample, double velocity_, bool async_input_data_valid) { // created by cpp_define_function


      // restoring the signals s21, s24, s20, s23, s22, path_psi, tracked_index, s394, output_valid, s393, s387, path_d_star, path_K, vehicle_delta, vehicle_psi_dot, vehicle_delta_dot, s406, s398, s399, head_index, s396, s392, s397_minimal_read_position, s403, s404, s405, elements_free_to_write, s408, velocity, need_more_path_input_data, distance_at_the_end_of_horizon, read_position, path_y, path_x, vehicle_psi, path_d, distance_ahead from the states 
      CircularBufferPtr &s21 = s21__block_2;
      CircularBufferPtr &s24 = s24__block_5;
      CircularBufferPtr &s20 = s20__block_1;
      CircularBufferPtr &s23 = s23__block_4;
      CircularBufferPtr &s22 = s22__block_3;
      double &path_psi = path_psi__block_341;
      int32_t &tracked_index = tracked_index__block_341;
      double &s394 = s394__block_343;
      bool &output_valid = output_valid__block_341;
      int32_t &s393 = s393__block_342;
      double &s387 = s387__block_341;
      double &path_d_star = path_d_star__block_344;
      double &path_K = path_K__block_341;
      double &vehicle_delta = vehicle_delta__block_341;
      double &vehicle_psi_dot = vehicle_psi_dot__block_341;
      double &vehicle_delta_dot = vehicle_delta_dot__block_341;
      int32_t &s406 = s406__block_355;
      int32_t &s398 = s398__block_347;
      int32_t &s399 = s399__block_348;
      int32_t &head_index = head_index__block_349;
      int32_t &s396 = s396__block_345;
      int32_t &s392 = s392__block_341;
      int32_t &s397_minimal_read_position = s397_minimal_read_position__block_346;
      int32_t &s403 = s403__block_352;
      int32_t &s404 = s404__block_353;
      int32_t &s405 = s405__block_354;
      int32_t &elements_free_to_write = elements_free_to_write__block_356;
      double &s408 = s408__block_357;
      double &velocity = velocity__block_358;
      bool &need_more_path_input_data = need_more_path_input_data__block_341;
      double &distance_at_the_end_of_horizon = distance_at_the_end_of_horizon__block_350;
      int32_t &read_position = read_position__block_341;
      double &path_y = path_y__block_341;
      double &path_x = path_x__block_341;
      double &vehicle_psi = vehicle_psi__block_341;
      double &path_d = path_d__block_341;
      double &distance_ahead = distance_ahead__block_351;


      // calculating the block outputs in the following order 
      // that depend on psi_sample, x_sample, K_sample, y_sample, d_sample, async_input_data_valid, Ts, input_sample_valid, wheelbase, velocity_
      // dependencies that require a state update are  


      if (async_input_data_valid == 1) {
        { // subsystem Sys1000_store_input_data
          block_11_subsystem_Sys1000_store_input_data.updateStates(s21, s24, psi_sample, x_sample, s20, s23, K_sample, y_sample, d_sample, s22);
        }

      }
      if (input_sample_valid == 1) {
        { // subsystem Sys1001_process_data
          block_341_subsystem_Sys1001_process_data.updateStates(s21, Ts, s20, wheelbase, s22, velocity_);
        }

      }
      block_343_mem = path_d_star;
      block_345_mem = s397_minimal_read_position;

      // calculating the block outputs in the following order 
      // that depend on 
      // dependencies that require a state update are  


    }
    // output signals of  updateStates
    struct Outputs_updateStates{
      ;

    };
    // input signals of updateStates
    struct Inputs_updateStates{
      double Ts;
      double psi_sample;
      double x_sample;
      bool input_sample_valid;
      double wheelbase;
      double K_sample;
      double y_sample;
      double d_sample;
      double velocity_;
      bool async_input_data_valid;

    };
    // wrapper function for updateStates
    Outputs_updateStates updateStates__(Inputs_updateStates inputs) {
      Outputs_updateStates outputs;

      updateStates(inputs.Ts, inputs.psi_sample, inputs.x_sample, inputs.input_sample_valid, inputs.wheelbase, inputs.K_sample, inputs.y_sample, inputs.d_sample, inputs.velocity_, inputs.async_input_data_valid);

      return outputs;
    }
    // API-function calcResults_1 to compute: output_valid, need_more_path_input_data, distance_at_the_end_of_horizon, distance_ahead, head_index, read_position, elements_free_to_write, tracked_index, path_d_star, path_d, path_x, path_y, path_psi, path_K, vehicle_delta, vehicle_delta_dot, vehicle_psi, vehicle_psi_dot, velocity
    void calcResults_1(bool &output_valid, bool &need_more_path_input_data, double &distance_at_the_end_of_horizon, double &distance_ahead, int32_t &head_index, int32_t &read_position, int32_t &elements_free_to_write, int32_t &tracked_index, double &path_d_star, double &path_d, double &path_x, double &path_y, double &path_psi, double &path_K, double &vehicle_delta, double &vehicle_delta_dot, double &vehicle_psi, double &vehicle_psi_dot, double &velocity, double Delta_l_r_dotdot, bool input_sample_valid, double Delta_l_r, double psi0, double y0, double d0, double velocity_, double Delta_l_r_dot, double x0) { // created by cpp_define_function
      CircularBufferPtr s21;
      CircularBufferPtr s24;
      CircularBufferPtr s20;
      CircularBufferPtr s23;
      CircularBufferPtr s22;
      double s394;
      int32_t s393;
      double s387;
      int32_t s406;
      int32_t s398;
      int32_t s399;
      int32_t s396;
      int32_t s392;
      int32_t s397_minimal_read_position;
      int32_t s403;
      int32_t s404;
      int32_t s405;
      double s408;


      // calculating the block outputs in the following order s21, s24, s20, s23, s22, path_psi, tracked_index, s394, output_valid, s393, s387, path_d_star, path_K, vehicle_delta, vehicle_psi_dot, vehicle_delta_dot, s406, s398, s399, head_index, s396, s392, s397_minimal_read_position, s403, s404, s405, elements_free_to_write, s408, velocity, need_more_path_input_data, distance_at_the_end_of_horizon, read_position, path_y, path_x, vehicle_psi, path_d, distance_ahead
      // that depend on Delta_l_r_dotdot, input_sample_valid, Delta_l_r, psi0, y0, d0, velocity_, Delta_l_r_dot, x0
      // dependencies that require a state update are s21, s24, psi_sample, x_sample, s20, s23, K_sample, y_sample, d_sample, s22, async_input_data_valid, Ts, input_sample_valid, wheelbase, velocity_, path_d_star, s397_minimal_read_position 

      s21 = block_2_ptr;
      s24 = block_5_ptr;
      s20 = block_1_ptr;
      s23 = block_4_ptr;
      s22 = block_3_ptr;
      if (input_sample_valid == 1) {
        { // subsystem Sys1001_process_data
          double _s370_d;
          double _s371_x;
          double _s372_y;
          double _s373_psi;
          double _s374_psi_dot;
          double _s375_psi_r;
          double _s377_K;
          double _s322_delta_delta;
          double _s313_delta_dot;
          double _s317_d_star;
          int32_t _s117_tracked_index_tracked_index;
          bool _s120_output_valid_output_valid_output_valid;
          bool _s121_need_more_path_input_data_need_more_path_input_data;
          int32_t _s324_read_position_read_position;
          int32_t _s326_minimal_read_position_minimal_read_position;
          block_341_subsystem_Sys1001_process_data.calcResults_1(_s370_d, _s371_x, _s372_y, _s373_psi, _s374_psi_dot, _s375_psi_r, _s377_K, _s322_delta_delta, _s313_delta_dot, _s317_d_star, _s117_tracked_index_tracked_index, _s120_output_valid_output_valid_output_valid, _s121_need_more_path_input_data_need_more_path_input_data, _s324_read_position_read_position, _s326_minimal_read_position_minimal_read_position, psi0, x0, y0, d0, s21, s20, s22, s24, Delta_l_r_dotdot, Delta_l_r, s23, velocity_, Delta_l_r_dot);
          path_psi = _s375_psi_r;
          tracked_index = _s117_tracked_index_tracked_index;
          output_valid = _s120_output_valid_output_valid_output_valid;
          s387 = _s317_d_star;
          path_K = _s377_K;
          vehicle_delta = _s322_delta_delta;
          vehicle_psi_dot = _s374_psi_dot;
          vehicle_delta_dot = _s313_delta_dot;
          s392 = _s326_minimal_read_position_minimal_read_position;
          need_more_path_input_data = _s121_need_more_path_input_data_need_more_path_input_data;
          read_position = _s324_read_position_read_position;
          path_y = _s372_y;
          path_x = _s371_x;
          vehicle_psi = _s373_psi;
          path_d = _s370_d;
        }

      }
      s394 = block_343_mem;
      s393 = input_sample_valid  &&  output_valid;
      if (s393) {
        path_d_star = s387;
      } else {
        path_d_star = s394;
      }
      s406 = 10000;
      { // calling the custom c++ function s20->get_current_absolute_write_index
        int32_t block_347_out0;
        s20->get_current_absolute_write_index(block_347_out0);
        s398 = block_347_out0;
      }
      s399 = 1;
      head_index = s398 - s399;
      s396 = block_345_mem;
      if (s393) {
        s397_minimal_read_position = s392;
      } else {
        s397_minimal_read_position = s396;
      }
      s403 = head_index - s397_minimal_read_position;
      s404 = 1;
      s405 = s403 + s404;
      elements_free_to_write = s406 - s405;
      s408 = 1.0;
      velocity = velocity_ * s408;
      { // calling the custom c++ function s20->read_from_absolute_index
        double block_350_out0;
        s20->read_from_absolute_index(block_350_out0, head_index);
        distance_at_the_end_of_horizon = block_350_out0;
      }
      distance_ahead = distance_at_the_end_of_horizon - path_d_star;

      // saving the signals s21, s24, s20, s23, s22, path_psi, tracked_index, s394, output_valid, s393, s387, path_d_star, path_K, vehicle_delta, vehicle_psi_dot, vehicle_delta_dot, s406, s398, s399, head_index, s396, s392, s397_minimal_read_position, s403, s404, s405, elements_free_to_write, s408, velocity, need_more_path_input_data, distance_at_the_end_of_horizon, read_position, path_y, path_x, vehicle_psi, path_d, distance_ahead into the states 
      s21__block_2 = s21;
      s24__block_5 = s24;
      s20__block_1 = s20;
      s23__block_4 = s23;
      s22__block_3 = s22;
      path_psi__block_341 = path_psi;
      tracked_index__block_341 = tracked_index;
      s394__block_343 = s394;
      output_valid__block_341 = output_valid;
      s393__block_342 = s393;
      s387__block_341 = s387;
      path_d_star__block_344 = path_d_star;
      path_K__block_341 = path_K;
      vehicle_delta__block_341 = vehicle_delta;
      vehicle_psi_dot__block_341 = vehicle_psi_dot;
      vehicle_delta_dot__block_341 = vehicle_delta_dot;
      s406__block_355 = s406;
      s398__block_347 = s398;
      s399__block_348 = s399;
      head_index__block_349 = head_index;
      s396__block_345 = s396;
      s392__block_341 = s392;
      s397_minimal_read_position__block_346 = s397_minimal_read_position;
      s403__block_352 = s403;
      s404__block_353 = s404;
      s405__block_354 = s405;
      elements_free_to_write__block_356 = elements_free_to_write;
      s408__block_357 = s408;
      velocity__block_358 = velocity;
      need_more_path_input_data__block_341 = need_more_path_input_data;
      distance_at_the_end_of_horizon__block_350 = distance_at_the_end_of_horizon;
      read_position__block_341 = read_position;
      path_y__block_341 = path_y;
      path_x__block_341 = path_x;
      vehicle_psi__block_341 = vehicle_psi;
      path_d__block_341 = path_d;
      distance_ahead__block_351 = distance_ahead;
    }
    // output signals of  calcResults_1
    struct Outputs_calcResults_1{
      bool output_valid;
      bool need_more_path_input_data;
      double distance_at_the_end_of_horizon;
      double distance_ahead;
      int32_t head_index;
      int32_t read_position;
      int32_t elements_free_to_write;
      int32_t tracked_index;
      double path_d_star;
      double path_d;
      double path_x;
      double path_y;
      double path_psi;
      double path_K;
      double vehicle_delta;
      double vehicle_delta_dot;
      double vehicle_psi;
      double vehicle_psi_dot;
      double velocity;

    };
    // input signals of calcResults_1
    struct Inputs_calcResults_1{
      double Delta_l_r_dotdot;
      bool input_sample_valid;
      double Delta_l_r;
      double psi0;
      double y0;
      double d0;
      double velocity_;
      double Delta_l_r_dot;
      double x0;

    };
    // wrapper function for calcResults_1
    Outputs_calcResults_1 calcResults_1__(Inputs_calcResults_1 inputs) {
      Outputs_calcResults_1 outputs;

      calcResults_1(outputs.output_valid, outputs.need_more_path_input_data, outputs.distance_at_the_end_of_horizon, outputs.distance_ahead, outputs.head_index, outputs.read_position, outputs.elements_free_to_write, outputs.tracked_index, outputs.path_d_star, outputs.path_d, outputs.path_x, outputs.path_y, outputs.path_psi, outputs.path_K, outputs.vehicle_delta, outputs.vehicle_delta_dot, outputs.vehicle_psi, outputs.vehicle_psi_dot, outputs.velocity,   inputs.Delta_l_r_dotdot, inputs.input_sample_valid, inputs.Delta_l_r, inputs.psi0, inputs.y0, inputs.d0, inputs.velocity_, inputs.Delta_l_r_dot, inputs.x0);

      return outputs;
    }
    // all system inputs and outputs combined
    struct Inputs{
      double Ts;
      double psi_sample;
      double x_sample;
      bool input_sample_valid;
      double Delta_l_r_dotdot;
      double Delta_l_r;
      double psi0;
      double wheelbase;
      double y0;
      double d0;
      double K_sample;
      double y_sample;
      double d_sample;
      double x0;
      double velocity_;
      double Delta_l_r_dot;
      bool async_input_data_valid;

    };
    struct Outputs{
      bool output_valid;
      bool need_more_path_input_data;
      double distance_at_the_end_of_horizon;
      double distance_ahead;
      int32_t head_index;
      int32_t read_position;
      int32_t elements_free_to_write;
      int32_t tracked_index;
      double path_d_star;
      double path_d;
      double path_x;
      double path_y;
      double path_psi;
      double path_K;
      double vehicle_delta;
      double vehicle_delta_dot;
      double vehicle_psi;
      double vehicle_psi_dot;
      double velocity;

    };
    // main step function 
    void step(Outputs & outputs, Inputs const & inputs, int calculate_outputs, bool update_states, bool reset_states) {
      if (reset_states) {
        resetStates();

      }
      if (calculate_outputs==1) {
        calcResults_1(outputs.output_valid, outputs.need_more_path_input_data, outputs.distance_at_the_end_of_horizon, outputs.distance_ahead, outputs.head_index, outputs.read_position, outputs.elements_free_to_write, outputs.tracked_index, outputs.path_d_star, outputs.path_d, outputs.path_x, outputs.path_y, outputs.path_psi, outputs.path_K, outputs.vehicle_delta, outputs.vehicle_delta_dot, outputs.vehicle_psi, outputs.vehicle_psi_dot, outputs.velocity,   inputs.Delta_l_r_dotdot, inputs.input_sample_valid, inputs.Delta_l_r, inputs.psi0, inputs.y0, inputs.d0, inputs.velocity_, inputs.Delta_l_r_dot, inputs.x0);

      }
      if (update_states) {
        updateStates(inputs.Ts, inputs.psi_sample, inputs.x_sample, inputs.input_sample_valid, inputs.wheelbase, inputs.K_sample, inputs.y_sample, inputs.d_sample, inputs.velocity_, inputs.async_input_data_valid);

      }

    }
  };

// end of namespace for simulation





#define S_FUNCTION_LEVEL 2
#define S_FUNCTION_NAME  lateral_path_transformer

#include "simstruc.h"

#define IS_PARAM_DOUBLE(pVal) (mxIsNumeric(pVal) && !mxIsLogical(pVal) &&!mxIsEmpty(pVal) && !mxIsSparse(pVal) && !mxIsComplex(pVal) && mxIsDouble(pVal))

//
// S-function methods
//

#define MDL_CHECK_PARAMETERS
#if defined(MDL_CHECK_PARAMETERS)  && defined(MATLAB_MEX_FILE)
static void mdlCheckParameters(SimStruct *S)
{

    const mxArray *pVal0 = ssGetSFcnParam(S,0);

    if ( !IS_PARAM_DOUBLE(pVal0)) {
        ssSetErrorStatus(S, "Parameter to S-function must be a double scalar");
        return;
    } 
}
#endif


static void mdlInitializeSizes(SimStruct *S)
{
    ssSetNumSFcnParams(S, 1);  /* Number of expected parameters */
#if defined(MATLAB_MEX_FILE)
    if (ssGetNumSFcnParams(S) == ssGetSFcnParamsCount(S)) {
        mdlCheckParameters(S);
        if (ssGetErrorStatus(S) != NULL) {
            return;
        }
    } else {
        return; /* Parameter mismatch will be reported by Simulink */
    }
#endif
    ssSetSFcnParamTunable(S, 0, 0);

    // number of cont and discrete states
    ssSetNumContStates(S, 0);
    ssSetNumDiscStates(S, 0);

    // number of input ports
    if (!ssSetNumInputPorts(S, 19  )) return;
    
    // set sizes 
    ssSetInputPortWidth(S, 0, 1); // Ts
    ssSetInputPortWidth(S, 1, 1); // wheelbase
    ssSetInputPortWidth(S, 2, 1); // velocity_
    ssSetInputPortWidth(S, 3, 1); // Delta_l_r
    ssSetInputPortWidth(S, 4, 1); // Delta_l_r_dot
    ssSetInputPortWidth(S, 5, 1); // Delta_l_r_dotdot
    ssSetInputPortWidth(S, 6, 1); // d0
    ssSetInputPortWidth(S, 7, 1); // x0
    ssSetInputPortWidth(S, 8, 1); // y0
    ssSetInputPortWidth(S, 9, 1); // psi0
    ssSetInputPortWidth(S, 10, 1); // delta0
    ssSetInputPortWidth(S, 11, 1); // delta_dot0
    ssSetInputPortWidth(S, 12, 1); // async_input_data_valid
    ssSetInputPortWidth(S, 13, 1); // input_sample_valid
    ssSetInputPortWidth(S, 14, 1); // d_sample
    ssSetInputPortWidth(S, 15, 1); // x_sample
    ssSetInputPortWidth(S, 16, 1); // y_sample
    ssSetInputPortWidth(S, 17, 1); // psi_sample
    ssSetInputPortWidth(S, 18, 1); // K_sample

    // set datatypes 
    ssSetInputPortDataType(S, 0, SS_DOUBLE); // Ts (double)
    ssSetInputPortDataType(S, 1, SS_DOUBLE); // wheelbase (double)
    ssSetInputPortDataType(S, 2, SS_DOUBLE); // velocity_ (double)
    ssSetInputPortDataType(S, 3, SS_DOUBLE); // Delta_l_r (double)
    ssSetInputPortDataType(S, 4, SS_DOUBLE); // Delta_l_r_dot (double)
    ssSetInputPortDataType(S, 5, SS_DOUBLE); // Delta_l_r_dotdot (double)
    ssSetInputPortDataType(S, 6, SS_DOUBLE); // d0 (double)
    ssSetInputPortDataType(S, 7, SS_DOUBLE); // x0 (double)
    ssSetInputPortDataType(S, 8, SS_DOUBLE); // y0 (double)
    ssSetInputPortDataType(S, 9, SS_DOUBLE); // psi0 (double)
    ssSetInputPortDataType(S, 10, SS_DOUBLE); // delta0 (double)
    ssSetInputPortDataType(S, 11, SS_DOUBLE); // delta_dot0 (double)
    ssSetInputPortDataType(S, 12, SS_BOOLEAN); // async_input_data_valid (bool)
    ssSetInputPortDataType(S, 13, SS_BOOLEAN); // input_sample_valid (bool)
    ssSetInputPortDataType(S, 14, SS_DOUBLE); // d_sample (double)
    ssSetInputPortDataType(S, 15, SS_DOUBLE); // x_sample (double)
    ssSetInputPortDataType(S, 16, SS_DOUBLE); // y_sample (double)
    ssSetInputPortDataType(S, 17, SS_DOUBLE); // psi_sample (double)
    ssSetInputPortDataType(S, 18, SS_DOUBLE); // K_sample (double)

    // set direct feedthough (for input signals that are needed to compute the system outputs)
    ssSetInputPortDirectFeedThrough(S, 5, 1); // Delta_l_r_dotdot
    ssSetInputPortDirectFeedThrough(S, 13, 1); // input_sample_valid
    ssSetInputPortDirectFeedThrough(S, 3, 1); // Delta_l_r
    ssSetInputPortDirectFeedThrough(S, 9, 1); // psi0
    ssSetInputPortDirectFeedThrough(S, 8, 1); // y0
    ssSetInputPortDirectFeedThrough(S, 6, 1); // d0
    ssSetInputPortDirectFeedThrough(S, 2, 1); // velocity_
    ssSetInputPortDirectFeedThrough(S, 4, 1); // Delta_l_r_dot
    ssSetInputPortDirectFeedThrough(S, 7, 1); // x0

    // number of output ports
    if (!ssSetNumOutputPorts(S, 19)) return;

    ssSetOutputPortWidth(S, 0, 1); // output_valid
    ssSetOutputPortWidth(S, 1, 1); // need_more_path_input_data
    ssSetOutputPortWidth(S, 2, 1); // distance_at_the_end_of_horizon
    ssSetOutputPortWidth(S, 3, 1); // distance_ahead
    ssSetOutputPortWidth(S, 4, 1); // head_index
    ssSetOutputPortWidth(S, 5, 1); // read_position
    ssSetOutputPortWidth(S, 6, 1); // elements_free_to_write
    ssSetOutputPortWidth(S, 7, 1); // tracked_index
    ssSetOutputPortWidth(S, 8, 1); // path_d_star
    ssSetOutputPortWidth(S, 9, 1); // path_d
    ssSetOutputPortWidth(S, 10, 1); // path_x
    ssSetOutputPortWidth(S, 11, 1); // path_y
    ssSetOutputPortWidth(S, 12, 1); // path_psi
    ssSetOutputPortWidth(S, 13, 1); // path_K
    ssSetOutputPortWidth(S, 14, 1); // vehicle_delta
    ssSetOutputPortWidth(S, 15, 1); // vehicle_delta_dot
    ssSetOutputPortWidth(S, 16, 1); // vehicle_psi
    ssSetOutputPortWidth(S, 17, 1); // vehicle_psi_dot
    ssSetOutputPortWidth(S, 18, 1); // velocity

    ssSetOutputPortDataType(S, 0, SS_BOOLEAN); // output_valid (bool)
    ssSetOutputPortDataType(S, 1, SS_BOOLEAN); // need_more_path_input_data (bool)
    ssSetOutputPortDataType(S, 2, SS_DOUBLE); // distance_at_the_end_of_horizon (double)
    ssSetOutputPortDataType(S, 3, SS_DOUBLE); // distance_ahead (double)
    ssSetOutputPortDataType(S, 4, SS_INT32); // head_index (int32_t)
    ssSetOutputPortDataType(S, 5, SS_INT32); // read_position (int32_t)
    ssSetOutputPortDataType(S, 6, SS_INT32); // elements_free_to_write (int32_t)
    ssSetOutputPortDataType(S, 7, SS_INT32); // tracked_index (int32_t)
    ssSetOutputPortDataType(S, 8, SS_DOUBLE); // path_d_star (double)
    ssSetOutputPortDataType(S, 9, SS_DOUBLE); // path_d (double)
    ssSetOutputPortDataType(S, 10, SS_DOUBLE); // path_x (double)
    ssSetOutputPortDataType(S, 11, SS_DOUBLE); // path_y (double)
    ssSetOutputPortDataType(S, 12, SS_DOUBLE); // path_psi (double)
    ssSetOutputPortDataType(S, 13, SS_DOUBLE); // path_K (double)
    ssSetOutputPortDataType(S, 14, SS_DOUBLE); // vehicle_delta (double)
    ssSetOutputPortDataType(S, 15, SS_DOUBLE); // vehicle_delta_dot (double)
    ssSetOutputPortDataType(S, 16, SS_DOUBLE); // vehicle_psi (double)
    ssSetOutputPortDataType(S, 17, SS_DOUBLE); // vehicle_psi_dot (double)
    ssSetOutputPortDataType(S, 18, SS_DOUBLE); // velocity (double)

    // sample times
    ssSetNumSampleTimes(S, 1);
    
    // define storage
    ssSetNumRWork(S, 0);
    ssSetNumIWork(S, 0);
    ssSetNumPWork(S, 1); // reserve element in the pointers vector
    ssSetNumModes(S, 0); // to store a C++ object
    ssSetNumNonsampledZCs(S, 0);

    // operating point
    ssSetOperatingPointCompliance(S, USE_DEFAULT_OPERATING_POINT);

    // general options
    ssSetOptions(S, 0);         
}




static void mdlInitializeSampleTimes(SimStruct *S)
{
    ssSetSampleTime(S, 0, mxGetScalar(ssGetSFcnParam(S, 0)));
    ssSetOffsetTime(S, 0, 0.0);
    ssSetModelReferenceSampleTimeDefaultInheritance(S);
}

#define MDL_START
#if defined(MDL_START) 
  static void mdlStart(SimStruct *S)
  {
      ssGetPWork(S)[0] = (void *) new simulation; // store new C++ object in the

      simulation *c = (simulation *) ssGetPWork(S)[0];
      
      // ORTD I/O structures
      simulation::Inputs inputs;
      simulation::Outputs outputs;

      // reset system
      c->step( outputs, inputs, false, false, true ); 
  }
#endif /*  MDL_START */

static void mdlOutputs(SimStruct *S, int_T tid)
{
    simulation *c = (simulation *) ssGetPWork(S)[0];
    
    // inputs
    InputRealPtrsType uPtrs5 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,5);
    InputBooleanPtrsType uPtrs13 = (InputBooleanPtrsType) ssGetInputPortSignalPtrs(S,13);
    InputRealPtrsType uPtrs3 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,3);
    InputRealPtrsType uPtrs9 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,9);
    InputRealPtrsType uPtrs8 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,8);
    InputRealPtrsType uPtrs6 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,6);
    InputRealPtrsType uPtrs2 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,2);
    InputRealPtrsType uPtrs4 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,4);
    InputRealPtrsType uPtrs7 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,7);

    
    // outputs
    boolean_T *y0 = (boolean_T *) ssGetOutputPortSignal(S, 0);
    boolean_T *y1 = (boolean_T *) ssGetOutputPortSignal(S, 1);
    real_T *y2 = (real_T *) ssGetOutputPortSignal(S, 2);
    real_T *y3 = (real_T *) ssGetOutputPortSignal(S, 3);
    int32_T *y4 = (int32_T *) ssGetOutputPortSignal(S, 4);
    int32_T *y5 = (int32_T *) ssGetOutputPortSignal(S, 5);
    int32_T *y6 = (int32_T *) ssGetOutputPortSignal(S, 6);
    int32_T *y7 = (int32_T *) ssGetOutputPortSignal(S, 7);
    real_T *y8 = (real_T *) ssGetOutputPortSignal(S, 8);
    real_T *y9 = (real_T *) ssGetOutputPortSignal(S, 9);
    real_T *y10 = (real_T *) ssGetOutputPortSignal(S, 10);
    real_T *y11 = (real_T *) ssGetOutputPortSignal(S, 11);
    real_T *y12 = (real_T *) ssGetOutputPortSignal(S, 12);
    real_T *y13 = (real_T *) ssGetOutputPortSignal(S, 13);
    real_T *y14 = (real_T *) ssGetOutputPortSignal(S, 14);
    real_T *y15 = (real_T *) ssGetOutputPortSignal(S, 15);
    real_T *y16 = (real_T *) ssGetOutputPortSignal(S, 16);
    real_T *y17 = (real_T *) ssGetOutputPortSignal(S, 17);
    real_T *y18 = (real_T *) ssGetOutputPortSignal(S, 18);

    // ORTD I/O structures
    simulation::Inputs inputs;
    simulation::Outputs outputs;

    
    inputs.Delta_l_r_dotdot = *uPtrs5[0];
    inputs.input_sample_valid = *uPtrs13[0];
    inputs.Delta_l_r = *uPtrs3[0];
    inputs.psi0 = *uPtrs9[0];
    inputs.y0 = *uPtrs8[0];
    inputs.d0 = *uPtrs6[0];
    inputs.velocity_ = *uPtrs2[0];
    inputs.Delta_l_r_dot = *uPtrs4[0];
    inputs.x0 = *uPtrs7[0];


    // compute the system outputs
    c->step( outputs, inputs, true, false, false ); 
    
    y0[0] = outputs.output_valid;
    y1[0] = outputs.need_more_path_input_data;
    y2[0] = outputs.distance_at_the_end_of_horizon;
    y3[0] = outputs.distance_ahead;
    y4[0] = outputs.head_index;
    y5[0] = outputs.read_position;
    y6[0] = outputs.elements_free_to_write;
    y7[0] = outputs.tracked_index;
    y8[0] = outputs.path_d_star;
    y9[0] = outputs.path_d;
    y10[0] = outputs.path_x;
    y11[0] = outputs.path_y;
    y12[0] = outputs.path_psi;
    y13[0] = outputs.path_K;
    y14[0] = outputs.vehicle_delta;
    y15[0] = outputs.vehicle_delta_dot;
    y16[0] = outputs.vehicle_psi;
    y17[0] = outputs.vehicle_psi_dot;
    y18[0] = outputs.velocity;

    
    UNUSED_ARG(tid);
}                                                


#define MDL_UPDATE
static void mdlUpdate(SimStruct *S, int_T tid)
{
    InputRealPtrsType uPtrs  = ssGetInputPortRealSignalPtrs(S,0);
    simulation *c = (simulation *) ssGetPWork(S)[0];

    simulation::Inputs inputs;
    simulation::Outputs outputs;

    InputRealPtrsType uPtrs0 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,0);
    InputRealPtrsType uPtrs17 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,17);
    InputRealPtrsType uPtrs15 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,15);
    InputBooleanPtrsType uPtrs13 = (InputBooleanPtrsType) ssGetInputPortSignalPtrs(S,13);
    InputRealPtrsType uPtrs1 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,1);
    InputRealPtrsType uPtrs18 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,18);
    InputRealPtrsType uPtrs16 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,16);
    InputRealPtrsType uPtrs14 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,14);
    InputRealPtrsType uPtrs2 = (InputRealPtrsType) ssGetInputPortSignalPtrs(S,2);
    InputBooleanPtrsType uPtrs12 = (InputBooleanPtrsType) ssGetInputPortSignalPtrs(S,12);


    UNUSED_ARG(tid); /* not used in single tasking mode */
    
    inputs.Ts = *uPtrs0[0];
    inputs.psi_sample = *uPtrs17[0];
    inputs.x_sample = *uPtrs15[0];
    inputs.input_sample_valid = *uPtrs13[0];
    inputs.wheelbase = *uPtrs1[0];
    inputs.K_sample = *uPtrs18[0];
    inputs.y_sample = *uPtrs16[0];
    inputs.d_sample = *uPtrs14[0];
    inputs.velocity_ = *uPtrs2[0];
    inputs.async_input_data_valid = *uPtrs12[0];


    // update the states of the system
    c->step( outputs, inputs, false, true, false ); 
}


static void mdlTerminate(SimStruct *S)
{
    simulation *c = (simulation *) ssGetPWork(S)[0]; // retrieve and destroy C++
    delete c;                                  // object in the termination
}                                              // function

/*=============================*
 * Required S-function trailer *
 *=============================*/

#ifdef  MATLAB_MEX_FILE    /* Is this file being compiled as a MEX-file? */
#include "simulink.c"      /* MEX-file interface mechanism */
#else
#include "cg_sfun.h"       /* Code generation registration function */
#endif


        
        